(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["cashier-otc-payment"],{

/***/ "../../components/lib/toggle-switch.css":
/*!*********************************************************************************!*\
  !*** /home/mahdi/workspace/deriv-app/packages/components/lib/toggle-switch.css ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvdG9nZ2xlLXN3aXRjaC5jc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbWFoZGkvd29ya3NwYWNlL2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi90b2dnbGUtc3dpdGNoLmNzcz9kZTJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../components/lib/toggle-switch.css\n");

/***/ }),

/***/ "../../components/lib/toggle-switch.js":
/*!********************************************************************************!*\
  !*** /home/mahdi/workspace/deriv-app/packages/components/lib/toggle-switch.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\")):undefined}(window,(function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=58)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},41:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdG9nZ2xlLXN3aXRjaC90b2dnbGUtc3dpdGNoLnNjc3M/ZTZlYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTc1NTM0MjEyNjAxXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWhvdC1sb2FkZXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJmaWxlTWFwXCI6XCJ7ZmlsZU5hbWV9XCJ9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpOztcbiAgICB9XG4gICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQ0FLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///41\\n\")},58:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// CONCATENATED MODULE: ./src/components/toggle-switch/toggle-switch.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\nvar toggle_switch_ToggleSwitch =\\n/*#__PURE__*/\\nfunction (_Component) {\\n  _inherits(ToggleSwitch, _Component);\\n\\n  function ToggleSwitch() {\\n    _classCallCheck(this, ToggleSwitch);\\n\\n    return _possibleConstructorReturn(this, _getPrototypeOf(ToggleSwitch).apply(this, arguments));\\n  }\\n\\n  _createClass(ToggleSwitch, [{\\n    key: \"render\",\\n    value: function render() {\\n      return external_react_default.a.createElement(external_react_[\"Fragment\"], null, external_react_default.a.createElement(\"input\", {\\n        className: external_classnames_default()(\\'dc-toggle-switch\\', {}, this.props.className),\\n        id: this.props.id,\\n        type: \"checkbox\",\\n        checked: this.props.is_enabled,\\n        onChange: this.props.handleToggle\\n      }), external_react_default.a.createElement(\"label\", {\\n        className: external_classnames_default()(\\'dc-toggle-switch__label\\', {}, this.props.classNameLabel),\\n        htmlFor: this.props.id\\n      }, external_react_default.a.createElement(\"span\", {\\n        className: external_classnames_default()(\\'dc-toggle-switch__button\\', {}, this.props.classNameButton)\\n      })));\\n    }\\n  }]);\\n\\n  return ToggleSwitch;\\n}(external_react_[\"Component\"]);\\n\\ntoggle_switch_ToggleSwitch.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  classNameButton: external_prop_types_default.a.string,\\n  classNameLabel: external_prop_types_default.a.string,\\n  handleToggle: external_prop_types_default.a.func.isRequired,\\n  id: external_prop_types_default.a.string.isRequired,\\n  is_enabled: external_prop_types_default.a.bool.isRequired\\n};\\n/* harmony default export */ var toggle_switch = (toggle_switch_ToggleSwitch);\\n// EXTERNAL MODULE: ./src/components/toggle-switch/toggle-switch.scss\\nvar toggle_switch_toggle_switch = __webpack_require__(41);\\n\\n// CONCATENATED MODULE: ./src/components/toggle-switch/index.js\\n\\n\\n/* harmony default export */ var components_toggle_switch = __webpack_exports__[\"default\"] = (toggle_switch);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdG9nZ2xlLXN3aXRjaC90b2dnbGUtc3dpdGNoLmpzeD84ZjBiIiwid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vLi9zcmMvY29tcG9uZW50cy90b2dnbGUtc3dpdGNoL2luZGV4LmpzP2MzNzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzICAgICAgICAgICAgICAgICAgICAgIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgICAgICAgICAgICAgICAgICAgICBmcm9tICdjbGFzc25hbWVzJztcblxuY2xhc3MgVG9nZ2xlU3dpdGNoIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZGMtdG9nZ2xlLXN3aXRjaCcsIHtcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5wcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cbiAgICAgICAgICAgICAgICAgICAgdHlwZT0nY2hlY2tib3gnXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuaXNfZW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMuaGFuZGxlVG9nZ2xlfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZGMtdG9nZ2xlLXN3aXRjaF9fbGFiZWwnLCB7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMucHJvcHMuY2xhc3NOYW1lTGFiZWwpfVxuICAgICAgICAgICAgICAgICAgICBodG1sRm9yPXt0aGlzLnByb3BzLmlkfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdkYy10b2dnbGUtc3dpdGNoX19idXR0b24nLCB7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMucHJvcHMuY2xhc3NOYW1lQnV0dG9uKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblRvZ2dsZVN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NOYW1lICAgICAgOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNsYXNzTmFtZUJ1dHRvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjbGFzc05hbWVMYWJlbCA6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGFuZGxlVG9nZ2xlICAgOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGlkICAgICAgICAgICAgIDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGlzX2VuYWJsZWQgICAgIDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvZ2dsZVN3aXRjaDtcbiIsImltcG9ydCBUb2dnbGVTd2l0Y2ggZnJvbSAnLi90b2dnbGUtc3dpdGNoLmpzeCc7XG5pbXBvcnQgJy4vdG9nZ2xlLXN3aXRjaC5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgVG9nZ2xlU3dpdGNoO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVNBO0FBRUE7QUFIQTtBQUtBO0FBQUE7QUFNQTs7OztBQXZCQTtBQUNBO0FBeUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFTQTs7Ozs7QUN2Q0E7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///58\\n')}}).default}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/toggle-switch.js\n");

/***/ }),

/***/ "../../p2p/index.js":
/*!*************************************************************!*\
  !*** /home/mahdi/workspace/deriv-app/packages/p2p/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(/*! ./lib/index.js */ \"../../p2p/lib/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vcDJwL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9ob21lL21haGRpL3dvcmtzcGFjZS9kZXJpdi1hcHAvcGFja2FnZXMvcDJwL2luZGV4LmpzP2E4MmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvaW5kZXguanMnKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../p2p/index.js\n");

/***/ }),

/***/ "../../p2p/lib/index.js":
/*!*****************************************************************!*\
  !*** /home/mahdi/workspace/deriv-app/packages/p2p/lib/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! deriv-components/lib/autocomplete */ \"../../components/lib/autocomplete.js\"), __webpack_require__(/*! deriv-components/lib/autocomplete.css */ \"../../components/lib/autocomplete.css\"), __webpack_require__(/*! deriv-components/lib/button */ \"../../components/lib/button.js\"), __webpack_require__(/*! deriv-components/lib/button-toggle-menu */ \"../../components/lib/button-toggle-menu.js\"), __webpack_require__(/*! deriv-components/lib/button-toggle-menu.css */ \"../../components/lib/button-toggle-menu.css\"), __webpack_require__(/*! deriv-components/lib/button.css */ \"../../components/lib/button.css\"), __webpack_require__(/*! deriv-components/lib/dropdown */ \"../../components/lib/dropdown.js\"), __webpack_require__(/*! deriv-components/lib/dropdown.css */ \"../../components/lib/dropdown.css\"), __webpack_require__(/*! deriv-components/lib/input */ \"../../components/lib/input.js\"), __webpack_require__(/*! deriv-components/lib/input.css */ \"../../components/lib/input.css\"), __webpack_require__(/*! deriv-components/lib/loading */ \"../../components/lib/loading.js\"), __webpack_require__(/*! deriv-components/lib/loading.css */ \"../../components/lib/loading.css\"), __webpack_require__(/*! deriv-components/lib/tabs */ \"../../components/lib/tabs.js\"), __webpack_require__(/*! deriv-components/lib/tabs.css */ \"../../components/lib/tabs.css\"), __webpack_require__(/*! deriv-components/lib/themed-scrollbars */ \"../../components/lib/themed-scrollbars.js\"), __webpack_require__(/*! deriv-components/lib/themed-scrollbars.css */ \"../../components/lib/themed-scrollbars.css\"), __webpack_require__(/*! deriv-components/lib/toggle-switch */ \"../../components/lib/toggle-switch.js\"), __webpack_require__(/*! deriv-components/lib/toggle-switch.css */ \"../../components/lib/toggle-switch.css\"), __webpack_require__(/*! deriv-translations */ \"../../translations/lib/main.js\"), __webpack_require__(/*! formik */ \"../../p2p/node_modules/formik/dist/formik.esm.js\"), __webpack_require__(/*! prop-types */ \"../../p2p/node_modules/prop-types/index.js\"), __webpack_require__(/*! react */ \"../node_modules/react/index.js\"));\n\telse {}\n})(window, function(__WEBPACK_EXTERNAL_MODULE_deriv_components_lib_autocomplete__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_autocomplete_css__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_button__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_button_toggle_menu__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_button_toggle_menu_css__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_button_css__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_dropdown__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_dropdown_css__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_input__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_input_css__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_loading__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_loading_css__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_tabs__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_tabs_css__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_themed_scrollbars__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_themed_scrollbars_css__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_toggle_switch__, __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_toggle_switch_css__, __WEBPACK_EXTERNAL_MODULE_deriv_translations__, __WEBPACK_EXTERNAL_MODULE_formik__, __WEBPACK_EXTERNAL_MODULE_prop_types__, __WEBPACK_EXTERNAL_MODULE_react__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/components/app.jsx\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/classnames/index.js\":\n/*!******************************************!*\\\n  !*** ./node_modules/classnames/index.js ***!\n  \\******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n  Copyright (c) 2017 Jed Watson.\\n  Licensed under the MIT License (MIT), see\\n  http://jedwatson.github.io/classnames\\n*/\\n/* global define */\\n\\n(function () {\\n\\t'use strict';\\n\\n\\tvar hasOwn = {}.hasOwnProperty;\\n\\n\\tfunction classNames () {\\n\\t\\tvar classes = [];\\n\\n\\t\\tfor (var i = 0; i < arguments.length; i++) {\\n\\t\\t\\tvar arg = arguments[i];\\n\\t\\t\\tif (!arg) continue;\\n\\n\\t\\t\\tvar argType = typeof arg;\\n\\n\\t\\t\\tif (argType === 'string' || argType === 'number') {\\n\\t\\t\\t\\tclasses.push(arg);\\n\\t\\t\\t} else if (Array.isArray(arg) && arg.length) {\\n\\t\\t\\t\\tvar inner = classNames.apply(null, arg);\\n\\t\\t\\t\\tif (inner) {\\n\\t\\t\\t\\t\\tclasses.push(inner);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (argType === 'object') {\\n\\t\\t\\t\\tfor (var key in arg) {\\n\\t\\t\\t\\t\\tif (hasOwn.call(arg, key) && arg[key]) {\\n\\t\\t\\t\\t\\t\\tclasses.push(key);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn classes.join(' ');\\n\\t}\\n\\n\\tif ( true && module.exports) {\\n\\t\\tclassNames.default = classNames;\\n\\t\\tmodule.exports = classNames;\\n\\t} else if (true) {\\n\\t\\t// register as 'classnames', consistent with npm package name\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn classNames;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else {}\\n}());\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzRkMjYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNyBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBLFVBRUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/classnames/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/ads/ads.scss\":\n/*!*******************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./src/components/ads/ads.scss ***!\n  \\*******************************************************************************************************************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \\\"./node_modules/css-loader/dist/runtime/api.js\\\")(false);\\n// Module\\nexports.push([module.i, \\\"/*------------------------------------*\\\\n *  # Constants\\\\n *------------------------------------*/\\\\n/* stylelint-disable color-no-hex */\\\\n/* COLOR PALETTE */\\\\n/* colors */\\\\n/* alpha colors */\\\\n/* gradient colors */\\\\n/* Preserve legacy variables */\\\\n/* Primary */\\\\n/* stylelint-enable color-no-hex */\\\\n/*------------------------------------*\\\\n *  # SASS Mixins and Functions\\\\n *------------------------------------*/\\\\n/*\\\\n * SASS interpolation\\\\n */\\\\n/*\\\\n * PX to EM\\\\n * @param $px - px value to be converted\\\\n * @param $base - base font size (in `em`)\\\\n * Note: 'em' values are calculate based on the element font-size\\\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\\\n * Usage example:\\\\n    padding: em(16px, 1.6em); // font-size in 'em'\\\\n */\\\\n/*\\\\n * Set property by passing a property name, and values.\\\\n * @param $property name - padding, margin etc.\\\\n * @param $values        - values in `px` (space separated for multiple values)\\\\n * @param $font-size     - base font-size in `em`\\\\n * Usage example:\\\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\\\n */\\\\n/*\\\\n * Generate typefaces key-value pair of variable name and config\\\\n * Example:\\\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\\\n */\\\\n/*\\\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\\\n * Usage example:\\\\n   @include setTypeface(16px, bold, black, uppercase);\\\\n */\\\\n/*\\\\n * Set typefaces by passing a typeface variable name\\\\n * @param $var   - typeface variable\\\\n * @param $tt    - text-transform property\\\\n * @param $align - text-align property\\\\n * Usage example:\\\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\\\n */\\\\n/*\\\\n * Range Slider Thumb styling is set here\\\\n */\\\\n/*\\\\n * SVG icons colors\\\\n */\\\\n/*\\\\n * Bar Spinner Animation\\\\n * @param $count    - number of bars\\\\n * @param $duration - duration of animation\\\\n * @param $phase    - each bar phase change delay\\\\n * Usage example:\\\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\\\n */\\\\n/*\\\\n * Tooltip colors\\\\n * @param $color - color property\\\\n * Usage example:\\\\n   @include tooltipColor($COLOR_RED);\\\\n */\\\\n/*\\\\n * Convert Tooltip colors\\\\n * @param $color - css color property\\\\n * Usage example:\\\\n   @include convertTooltipColor(var(--status-default));\\\\n */\\\\n/*\\\\n    Constants\\\\n*/\\\\n/*\\\\n    Variables\\\\n*/\\\\n/*\\\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\\\n    Variables name example: --title-center-semibold-red\\\\n */\\\\n/*\\\\n    to use styles without modifier class on .inline-icon\\\\n    use @extend\\\\n\\\\n    e.g. style icon on parent hover:\\\\n        a:hover .inline-icon {\\\\n            @extend %inline-icon.active;\\\\n        }\\\\n*/\\\\n.ads {\\\\n  margin: 1.6rem;\\\\n  padding: 1.6rem; }\\\\n  .ads__header {\\\\n    background: var(--general-section-1);\\\\n    padding: 0.8rem;\\\\n    width: 100%; }\\\\n    .ads__header__filters {\\\\n      width: 12rem; }\\\\n\\\", \\\"\\\"]);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8hLi9zcmMvY29tcG9uZW50cy9hZHMvYWRzLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvLi9zcmMvY29tcG9uZW50cy9hZHMvYWRzLnNjc3M/ZjE2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcbiAqICAjIENvbnN0YW50c1xcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cXG4vKiBzdHlsZWxpbnQtZGlzYWJsZSBjb2xvci1uby1oZXggKi9cXG4vKiBDT0xPUiBQQUxFVFRFICovXFxuLyogY29sb3JzICovXFxuLyogYWxwaGEgY29sb3JzICovXFxuLyogZ3JhZGllbnQgY29sb3JzICovXFxuLyogUHJlc2VydmUgbGVnYWN5IHZhcmlhYmxlcyAqL1xcbi8qIFByaW1hcnkgKi9cXG4vKiBzdHlsZWxpbnQtZW5hYmxlIGNvbG9yLW5vLWhleCAqL1xcbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcbiAqICAjIFNBU1MgTWl4aW5zIGFuZCBGdW5jdGlvbnNcXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXFxuLypcXG4gKiBTQVNTIGludGVycG9sYXRpb25cXG4gKi9cXG4vKlxcbiAqIFBYIHRvIEVNXFxuICogQHBhcmFtICRweCAtIHB4IHZhbHVlIHRvIGJlIGNvbnZlcnRlZFxcbiAqIEBwYXJhbSAkYmFzZSAtIGJhc2UgZm9udCBzaXplIChpbiBgZW1gKVxcbiAqIE5vdGU6ICdlbScgdmFsdWVzIGFyZSBjYWxjdWxhdGUgYmFzZWQgb24gdGhlIGVsZW1lbnQgZm9udC1zaXplXFxuICogICAgICAgdG8gcHJvcGVybHkgY29udmVydHMgJ3B4JyB0byAnZW0nLCBwbGVhc2UgcGFzcyBpbiB0aGUgZWxlbWVudCBmb250LXNpemUgd2l0aCBpdFxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgIHBhZGRpbmc6IGVtKDE2cHgsIDEuNmVtKTsgLy8gZm9udC1zaXplIGluICdlbSdcXG4gKi9cXG4vKlxcbiAqIFNldCBwcm9wZXJ0eSBieSBwYXNzaW5nIGEgcHJvcGVydHkgbmFtZSwgYW5kIHZhbHVlcy5cXG4gKiBAcGFyYW0gJHByb3BlcnR5IG5hbWUgLSBwYWRkaW5nLCBtYXJnaW4gZXRjLlxcbiAqIEBwYXJhbSAkdmFsdWVzICAgICAgICAtIHZhbHVlcyBpbiBgcHhgIChzcGFjZSBzZXBhcmF0ZWQgZm9yIG11bHRpcGxlIHZhbHVlcylcXG4gKiBAcGFyYW0gJGZvbnQtc2l6ZSAgICAgLSBiYXNlIGZvbnQtc2l6ZSBpbiBgZW1gXFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSB0b0VtKHBhZGRpbmcsIDhweCAxNnB4IDhweCwgMS42ZW0pO1xcbiAqL1xcbi8qXFxuICogR2VuZXJhdGUgdHlwZWZhY2VzIGtleS12YWx1ZSBwYWlyIG9mIHZhcmlhYmxlIG5hbWUgYW5kIGNvbmZpZ1xcbiAqIEV4YW1wbGU6XFxuICAgLS1wYXJhZ3JhcGgtY2VudGVyLWJvbGQtYmxhY2s6ICgxNHB4LCBjZW50ZXIsIGJvbGQsIGJsYWNrKVxcbiAqL1xcbi8qXFxuICogU2V0cyBmb250LXNpemUsIGZvbnQtd2VpZ2h0LCBjb2xvciwgdGV4dC10cmFuc2Zvcm0sIHRleHQtYWxpZ24gYW5kIGxpbmUtaGVpZ2h0XFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSBzZXRUeXBlZmFjZSgxNnB4LCBib2xkLCBibGFjaywgdXBwZXJjYXNlKTtcXG4gKi9cXG4vKlxcbiAqIFNldCB0eXBlZmFjZXMgYnkgcGFzc2luZyBhIHR5cGVmYWNlIHZhcmlhYmxlIG5hbWVcXG4gKiBAcGFyYW0gJHZhciAgIC0gdHlwZWZhY2UgdmFyaWFibGVcXG4gKiBAcGFyYW0gJHR0ICAgIC0gdGV4dC10cmFuc2Zvcm0gcHJvcGVydHlcXG4gKiBAcGFyYW0gJGFsaWduIC0gdGV4dC1hbGlnbiBwcm9wZXJ0eVxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgdHlwZWZhY2UoLS1wYXJhZ3JhcGgtYm9sZC1ibGFjaywgdXBwZXJjYXNlLCBjZW50ZXIpO1xcbiAqL1xcbi8qXFxuICogUmFuZ2UgU2xpZGVyIFRodW1iIHN0eWxpbmcgaXMgc2V0IGhlcmVcXG4gKi9cXG4vKlxcbiAqIFNWRyBpY29ucyBjb2xvcnNcXG4gKi9cXG4vKlxcbiAqIEJhciBTcGlubmVyIEFuaW1hdGlvblxcbiAqIEBwYXJhbSAkY291bnQgICAgLSBudW1iZXIgb2YgYmFyc1xcbiAqIEBwYXJhbSAkZHVyYXRpb24gLSBkdXJhdGlvbiBvZiBhbmltYXRpb25cXG4gKiBAcGFyYW0gJHBoYXNlICAgIC0gZWFjaCBiYXIgcGhhc2UgY2hhbmdlIGRlbGF5XFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSBjcmVhdGVCYXJzcGlubmVyQW5pbWF0aW9uKDUsIDEuMnMsIDAsMSk7XFxuICovXFxuLypcXG4gKiBUb29sdGlwIGNvbG9yc1xcbiAqIEBwYXJhbSAkY29sb3IgLSBjb2xvciBwcm9wZXJ0eVxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgdG9vbHRpcENvbG9yKCRDT0xPUl9SRUQpO1xcbiAqL1xcbi8qXFxuICogQ29udmVydCBUb29sdGlwIGNvbG9yc1xcbiAqIEBwYXJhbSAkY29sb3IgLSBjc3MgY29sb3IgcHJvcGVydHlcXG4gKiBVc2FnZSBleGFtcGxlOlxcbiAgIEBpbmNsdWRlIGNvbnZlcnRUb29sdGlwQ29sb3IodmFyKC0tc3RhdHVzLWRlZmF1bHQpKTtcXG4gKi9cXG4vKlxcbiAgICBDb25zdGFudHNcXG4qL1xcbi8qXFxuICAgIFZhcmlhYmxlc1xcbiovXFxuLypcXG4gICAgTGlzdCBvZiBhbGwgdHlwZWZhY2VzIHZhcmlhYmxlcyBpbiB0aGUgZm9ybWF0OiAtLSRGT05UX1NJWkVTLSRURVhUX0FMSUdOLSRGT05UX1dFSUdIVFMtQ09MT1JTLlxcbiAgICBTZWUgJEZPTlRfU0laRVMsICRURVhUX0FMSUdOLCAkRk9OVF9XRUlHSFRTLCAkQ09MT1JTIG1hcHMgYWJvdmUgZm9yIHJlZmVyZW5jZXMuXFxuICAgIFZhcmlhYmxlcyBuYW1lIGV4YW1wbGU6IC0tdGl0bGUtY2VudGVyLXNlbWlib2xkLXJlZFxcbiAqL1xcbi8qXFxuICAgIHRvIHVzZSBzdHlsZXMgd2l0aG91dCBtb2RpZmllciBjbGFzcyBvbiAuaW5saW5lLWljb25cXG4gICAgdXNlIEBleHRlbmRcXG5cXG4gICAgZS5nLiBzdHlsZSBpY29uIG9uIHBhcmVudCBob3ZlcjpcXG4gICAgICAgIGE6aG92ZXIgLmlubGluZS1pY29uIHtcXG4gICAgICAgICAgICBAZXh0ZW5kICVpbmxpbmUtaWNvbi5hY3RpdmU7XFxuICAgICAgICB9XFxuKi9cXG4uYWRzIHtcXG4gIG1hcmdpbjogMS42cmVtO1xcbiAgcGFkZGluZzogMS42cmVtOyB9XFxuICAuYWRzX19oZWFkZXIge1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5lcmFsLXNlY3Rpb24tMSk7XFxuICAgIHBhZGRpbmc6IDAuOHJlbTtcXG4gICAgd2lkdGg6IDEwMCU7IH1cXG4gICAgLmFkc19faGVhZGVyX19maWx0ZXJzIHtcXG4gICAgICB3aWR0aDogMTJyZW07IH1cXG5cIiwgXCJcIl0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/ads/ads.scss\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/app.scss\":\n/*!***************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./src/components/app.scss ***!\n  \\***************************************************************************************************************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \\\"./node_modules/css-loader/dist/runtime/api.js\\\")(false);\\n// Module\\nexports.push([module.i, \\\"/*------------------------------------*\\\\n *  # Constants\\\\n *------------------------------------*/\\\\n/* stylelint-disable color-no-hex */\\\\n/* COLOR PALETTE */\\\\n/* colors */\\\\n/* alpha colors */\\\\n/* gradient colors */\\\\n/* Preserve legacy variables */\\\\n/* Primary */\\\\n/* stylelint-enable color-no-hex */\\\\n/*------------------------------------*\\\\n *  # SASS Mixins and Functions\\\\n *------------------------------------*/\\\\n/*\\\\n * SASS interpolation\\\\n */\\\\n/*\\\\n * PX to EM\\\\n * @param $px - px value to be converted\\\\n * @param $base - base font size (in `em`)\\\\n * Note: 'em' values are calculate based on the element font-size\\\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\\\n * Usage example:\\\\n    padding: em(16px, 1.6em); // font-size in 'em'\\\\n */\\\\n/*\\\\n * Set property by passing a property name, and values.\\\\n * @param $property name - padding, margin etc.\\\\n * @param $values        - values in `px` (space separated for multiple values)\\\\n * @param $font-size     - base font-size in `em`\\\\n * Usage example:\\\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\\\n */\\\\n/*\\\\n * Generate typefaces key-value pair of variable name and config\\\\n * Example:\\\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\\\n */\\\\n/*\\\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\\\n * Usage example:\\\\n   @include setTypeface(16px, bold, black, uppercase);\\\\n */\\\\n/*\\\\n * Set typefaces by passing a typeface variable name\\\\n * @param $var   - typeface variable\\\\n * @param $tt    - text-transform property\\\\n * @param $align - text-align property\\\\n * Usage example:\\\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\\\n */\\\\n/*\\\\n * Range Slider Thumb styling is set here\\\\n */\\\\n/*\\\\n * SVG icons colors\\\\n */\\\\n/*\\\\n * Bar Spinner Animation\\\\n * @param $count    - number of bars\\\\n * @param $duration - duration of animation\\\\n * @param $phase    - each bar phase change delay\\\\n * Usage example:\\\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\\\n */\\\\n/*\\\\n * Tooltip colors\\\\n * @param $color - color property\\\\n * Usage example:\\\\n   @include tooltipColor($COLOR_RED);\\\\n */\\\\n/*\\\\n * Convert Tooltip colors\\\\n * @param $color - css color property\\\\n * Usage example:\\\\n   @include convertTooltipColor(var(--status-default));\\\\n */\\\\n/*\\\\n    Constants\\\\n*/\\\\n/*\\\\n    Variables\\\\n*/\\\\n/*\\\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\\\n    Variables name example: --title-center-semibold-red\\\\n */\\\\n/*\\\\n    to use styles without modifier class on .inline-icon\\\\n    use @extend\\\\n\\\\n    e.g. style icon on parent hover:\\\\n        a:hover .inline-icon {\\\\n            @extend %inline-icon.active;\\\\n        }\\\\n*/\\\\n/*------------------------------------*\\\\n *  # Reset SCSS\\\\n *  - to make browsers render all elements more consistently\\\\n *  - Reference:  https://github.com/AdamMarsden/simple-typography/blob/master/_reset.scss\\\\n *------------------------------------*/\\\\n/* stylelint-disable */\\\\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, input, menu, nav, output, ruby, section, summary, time, mark, audio, video {\\\\n  margin: 0;\\\\n  padding: 0;\\\\n  border: 0;\\\\n  font: inherit;\\\\n  vertical-align: baseline; }\\\\n\\\\n/* HTML5 display-role reset for older browsers */\\\\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\\\\n  display: block; }\\\\n\\\\nhtml {\\\\n  height: 100%;\\\\n  font-size: 10px; }\\\\n\\\\nbody {\\\\n  line-height: 1;\\\\n  height: 100%; }\\\\n\\\\nol, ul {\\\\n  list-style: none; }\\\\n\\\\nblockquote, q {\\\\n  quotes: none; }\\\\n\\\\nblockquote:before, blockquote:after, q:before, q:after {\\\\n  content: '';\\\\n  content: none; }\\\\n\\\\ntable {\\\\n  border-collapse: collapse;\\\\n  border-spacing: 0; }\\\\n\\\\n/* stylelint-enable */\\\\n.deriv-p2p {\\\\n  background: transparent;\\\\n  height: 100%;\\\\n  width: 100%; }\\\\n  .deriv-p2p__content {\\\\n    padding: 0 1.6rem; }\\\\n  .deriv-p2p .dc-tabs {\\\\n    position: static; }\\\\n\\\", \\\"\\\"]);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8hLi9zcmMvY29tcG9uZW50cy9hcHAuc2Nzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC8uL3NyYy9jb21wb25lbnRzL2FwcC5zY3NzPzdjNDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXG4gKiAgIyBDb25zdGFudHNcXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXFxuLyogc3R5bGVsaW50LWRpc2FibGUgY29sb3Itbm8taGV4ICovXFxuLyogQ09MT1IgUEFMRVRURSAqL1xcbi8qIGNvbG9ycyAqL1xcbi8qIGFscGhhIGNvbG9ycyAqL1xcbi8qIGdyYWRpZW50IGNvbG9ycyAqL1xcbi8qIFByZXNlcnZlIGxlZ2FjeSB2YXJpYWJsZXMgKi9cXG4vKiBQcmltYXJ5ICovXFxuLyogc3R5bGVsaW50LWVuYWJsZSBjb2xvci1uby1oZXggKi9cXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXG4gKiAgIyBTQVNTIE1peGlucyBhbmQgRnVuY3Rpb25zXFxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbi8qXFxuICogU0FTUyBpbnRlcnBvbGF0aW9uXFxuICovXFxuLypcXG4gKiBQWCB0byBFTVxcbiAqIEBwYXJhbSAkcHggLSBweCB2YWx1ZSB0byBiZSBjb252ZXJ0ZWRcXG4gKiBAcGFyYW0gJGJhc2UgLSBiYXNlIGZvbnQgc2l6ZSAoaW4gYGVtYClcXG4gKiBOb3RlOiAnZW0nIHZhbHVlcyBhcmUgY2FsY3VsYXRlIGJhc2VkIG9uIHRoZSBlbGVtZW50IGZvbnQtc2l6ZVxcbiAqICAgICAgIHRvIHByb3Blcmx5IGNvbnZlcnRzICdweCcgdG8gJ2VtJywgcGxlYXNlIHBhc3MgaW4gdGhlIGVsZW1lbnQgZm9udC1zaXplIHdpdGggaXRcXG4gKiBVc2FnZSBleGFtcGxlOlxcbiAgICBwYWRkaW5nOiBlbSgxNnB4LCAxLjZlbSk7IC8vIGZvbnQtc2l6ZSBpbiAnZW0nXFxuICovXFxuLypcXG4gKiBTZXQgcHJvcGVydHkgYnkgcGFzc2luZyBhIHByb3BlcnR5IG5hbWUsIGFuZCB2YWx1ZXMuXFxuICogQHBhcmFtICRwcm9wZXJ0eSBuYW1lIC0gcGFkZGluZywgbWFyZ2luIGV0Yy5cXG4gKiBAcGFyYW0gJHZhbHVlcyAgICAgICAgLSB2YWx1ZXMgaW4gYHB4YCAoc3BhY2Ugc2VwYXJhdGVkIGZvciBtdWx0aXBsZSB2YWx1ZXMpXFxuICogQHBhcmFtICRmb250LXNpemUgICAgIC0gYmFzZSBmb250LXNpemUgaW4gYGVtYFxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgdG9FbShwYWRkaW5nLCA4cHggMTZweCA4cHgsIDEuNmVtKTtcXG4gKi9cXG4vKlxcbiAqIEdlbmVyYXRlIHR5cGVmYWNlcyBrZXktdmFsdWUgcGFpciBvZiB2YXJpYWJsZSBuYW1lIGFuZCBjb25maWdcXG4gKiBFeGFtcGxlOlxcbiAgIC0tcGFyYWdyYXBoLWNlbnRlci1ib2xkLWJsYWNrOiAoMTRweCwgY2VudGVyLCBib2xkLCBibGFjaylcXG4gKi9cXG4vKlxcbiAqIFNldHMgZm9udC1zaXplLCBmb250LXdlaWdodCwgY29sb3IsIHRleHQtdHJhbnNmb3JtLCB0ZXh0LWFsaWduIGFuZCBsaW5lLWhlaWdodFxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgc2V0VHlwZWZhY2UoMTZweCwgYm9sZCwgYmxhY2ssIHVwcGVyY2FzZSk7XFxuICovXFxuLypcXG4gKiBTZXQgdHlwZWZhY2VzIGJ5IHBhc3NpbmcgYSB0eXBlZmFjZSB2YXJpYWJsZSBuYW1lXFxuICogQHBhcmFtICR2YXIgICAtIHR5cGVmYWNlIHZhcmlhYmxlXFxuICogQHBhcmFtICR0dCAgICAtIHRleHQtdHJhbnNmb3JtIHByb3BlcnR5XFxuICogQHBhcmFtICRhbGlnbiAtIHRleHQtYWxpZ24gcHJvcGVydHlcXG4gKiBVc2FnZSBleGFtcGxlOlxcbiAgIEBpbmNsdWRlIHR5cGVmYWNlKC0tcGFyYWdyYXBoLWJvbGQtYmxhY2ssIHVwcGVyY2FzZSwgY2VudGVyKTtcXG4gKi9cXG4vKlxcbiAqIFJhbmdlIFNsaWRlciBUaHVtYiBzdHlsaW5nIGlzIHNldCBoZXJlXFxuICovXFxuLypcXG4gKiBTVkcgaWNvbnMgY29sb3JzXFxuICovXFxuLypcXG4gKiBCYXIgU3Bpbm5lciBBbmltYXRpb25cXG4gKiBAcGFyYW0gJGNvdW50ICAgIC0gbnVtYmVyIG9mIGJhcnNcXG4gKiBAcGFyYW0gJGR1cmF0aW9uIC0gZHVyYXRpb24gb2YgYW5pbWF0aW9uXFxuICogQHBhcmFtICRwaGFzZSAgICAtIGVhY2ggYmFyIHBoYXNlIGNoYW5nZSBkZWxheVxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgY3JlYXRlQmFyc3Bpbm5lckFuaW1hdGlvbig1LCAxLjJzLCAwLDEpO1xcbiAqL1xcbi8qXFxuICogVG9vbHRpcCBjb2xvcnNcXG4gKiBAcGFyYW0gJGNvbG9yIC0gY29sb3IgcHJvcGVydHlcXG4gKiBVc2FnZSBleGFtcGxlOlxcbiAgIEBpbmNsdWRlIHRvb2x0aXBDb2xvcigkQ09MT1JfUkVEKTtcXG4gKi9cXG4vKlxcbiAqIENvbnZlcnQgVG9vbHRpcCBjb2xvcnNcXG4gKiBAcGFyYW0gJGNvbG9yIC0gY3NzIGNvbG9yIHByb3BlcnR5XFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSBjb252ZXJ0VG9vbHRpcENvbG9yKHZhcigtLXN0YXR1cy1kZWZhdWx0KSk7XFxuICovXFxuLypcXG4gICAgQ29uc3RhbnRzXFxuKi9cXG4vKlxcbiAgICBWYXJpYWJsZXNcXG4qL1xcbi8qXFxuICAgIExpc3Qgb2YgYWxsIHR5cGVmYWNlcyB2YXJpYWJsZXMgaW4gdGhlIGZvcm1hdDogLS0kRk9OVF9TSVpFUy0kVEVYVF9BTElHTi0kRk9OVF9XRUlHSFRTLUNPTE9SUy5cXG4gICAgU2VlICRGT05UX1NJWkVTLCAkVEVYVF9BTElHTiwgJEZPTlRfV0VJR0hUUywgJENPTE9SUyBtYXBzIGFib3ZlIGZvciByZWZlcmVuY2VzLlxcbiAgICBWYXJpYWJsZXMgbmFtZSBleGFtcGxlOiAtLXRpdGxlLWNlbnRlci1zZW1pYm9sZC1yZWRcXG4gKi9cXG4vKlxcbiAgICB0byB1c2Ugc3R5bGVzIHdpdGhvdXQgbW9kaWZpZXIgY2xhc3Mgb24gLmlubGluZS1pY29uXFxuICAgIHVzZSBAZXh0ZW5kXFxuXFxuICAgIGUuZy4gc3R5bGUgaWNvbiBvbiBwYXJlbnQgaG92ZXI6XFxuICAgICAgICBhOmhvdmVyIC5pbmxpbmUtaWNvbiB7XFxuICAgICAgICAgICAgQGV4dGVuZCAlaW5saW5lLWljb24uYWN0aXZlO1xcbiAgICAgICAgfVxcbiovXFxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxuICogICMgUmVzZXQgU0NTU1xcbiAqICAtIHRvIG1ha2UgYnJvd3NlcnMgcmVuZGVyIGFsbCBlbGVtZW50cyBtb3JlIGNvbnNpc3RlbnRseVxcbiAqICAtIFJlZmVyZW5jZTogIGh0dHBzOi8vZ2l0aHViLmNvbS9BZGFtTWFyc2Rlbi9zaW1wbGUtdHlwb2dyYXBoeS9ibG9iL21hc3Rlci9fcmVzZXQuc2Nzc1xcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cXG4vKiBzdHlsZWxpbnQtZGlzYWJsZSAqL1xcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSwgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLCBhLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsIGRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCwgc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhciwgYiwgdSwgaSwgY2VudGVyLCBkbCwgZHQsIGRkLCBvbCwgdWwsIGxpLCBmaWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCwgdGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsIGFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBmaWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIGlucHV0LCBtZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSwgdGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IDA7XFxuICBmb250OiBpbmhlcml0O1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XFxuXFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbmh0bWwge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgZm9udC1zaXplOiAxMHB4OyB9XFxuXFxuYm9keSB7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGhlaWdodDogMTAwJTsgfVxcblxcbm9sLCB1bCB7XFxuICBsaXN0LXN0eWxlOiBub25lOyB9XFxuXFxuYmxvY2txdW90ZSwgcSB7XFxuICBxdW90ZXM6IG5vbmU7IH1cXG5cXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlciwgcTpiZWZvcmUsIHE6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICBjb250ZW50OiBub25lOyB9XFxuXFxudGFibGUge1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XFxuXFxuLyogc3R5bGVsaW50LWVuYWJsZSAqL1xcbi5kZXJpdi1wMnAge1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTsgfVxcbiAgLmRlcml2LXAycF9fY29udGVudCB7XFxuICAgIHBhZGRpbmc6IDAgMS42cmVtOyB9XFxuICAuZGVyaXYtcDJwIC5kYy10YWJzIHtcXG4gICAgcG9zaXRpb246IHN0YXRpYzsgfVxcblwiLCBcIlwiXSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/app.scss\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/my-ads/my-ads.scss\":\n/*!*************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./src/components/my-ads/my-ads.scss ***!\n  \\*************************************************************************************************************************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \\\"./node_modules/css-loader/dist/runtime/api.js\\\")(false);\\n// Module\\nexports.push([module.i, \\\"/*------------------------------------*\\\\n *  # Constants\\\\n *------------------------------------*/\\\\n/* stylelint-disable color-no-hex */\\\\n/* COLOR PALETTE */\\\\n/* colors */\\\\n/* alpha colors */\\\\n/* gradient colors */\\\\n/* Preserve legacy variables */\\\\n/* Primary */\\\\n/* stylelint-enable color-no-hex */\\\\n/*------------------------------------*\\\\n *  # SASS Mixins and Functions\\\\n *------------------------------------*/\\\\n/*\\\\n * SASS interpolation\\\\n */\\\\n/*\\\\n * PX to EM\\\\n * @param $px - px value to be converted\\\\n * @param $base - base font size (in `em`)\\\\n * Note: 'em' values are calculate based on the element font-size\\\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\\\n * Usage example:\\\\n    padding: em(16px, 1.6em); // font-size in 'em'\\\\n */\\\\n/*\\\\n * Set property by passing a property name, and values.\\\\n * @param $property name - padding, margin etc.\\\\n * @param $values        - values in `px` (space separated for multiple values)\\\\n * @param $font-size     - base font-size in `em`\\\\n * Usage example:\\\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\\\n */\\\\n/*\\\\n * Generate typefaces key-value pair of variable name and config\\\\n * Example:\\\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\\\n */\\\\n/*\\\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\\\n * Usage example:\\\\n   @include setTypeface(16px, bold, black, uppercase);\\\\n */\\\\n/*\\\\n * Set typefaces by passing a typeface variable name\\\\n * @param $var   - typeface variable\\\\n * @param $tt    - text-transform property\\\\n * @param $align - text-align property\\\\n * Usage example:\\\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\\\n */\\\\n/*\\\\n * Range Slider Thumb styling is set here\\\\n */\\\\n/*\\\\n * SVG icons colors\\\\n */\\\\n/*\\\\n * Bar Spinner Animation\\\\n * @param $count    - number of bars\\\\n * @param $duration - duration of animation\\\\n * @param $phase    - each bar phase change delay\\\\n * Usage example:\\\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\\\n */\\\\n/*\\\\n * Tooltip colors\\\\n * @param $color - color property\\\\n * Usage example:\\\\n   @include tooltipColor($COLOR_RED);\\\\n */\\\\n/*\\\\n * Convert Tooltip colors\\\\n * @param $color - css color property\\\\n * Usage example:\\\\n   @include convertTooltipColor(var(--status-default));\\\\n */\\\\n/*\\\\n    Constants\\\\n*/\\\\n/*\\\\n    Variables\\\\n*/\\\\n/*\\\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\\\n    Variables name example: --title-center-semibold-red\\\\n */\\\\n/*\\\\n    to use styles without modifier class on .inline-icon\\\\n    use @extend\\\\n\\\\n    e.g. style icon on parent hover:\\\\n        a:hover .inline-icon {\\\\n            @extend %inline-icon.active;\\\\n        }\\\\n*/\\\\n.my-ads {\\\\n  padding: 1.6rem; }\\\\n  .my-ads__header {\\\\n    display: flex;\\\\n    align-items: center; }\\\\n  .my-ads__heading-wrapper {\\\\n    display: flex;\\\\n    justify-content: flex-start;\\\\n    align-items: center;\\\\n    font-size: 1.6rem;\\\\n    font-weight: bold;\\\\n    line-height: 1.75;\\\\n    color: var(--text-general); }\\\\n  .my-ads__heading-btn {\\\\n    padding: 0.4rem 1.6rem 0 0;\\\\n    cursor: pointer;\\\\n    border-radius: 4px; }\\\\n  .my-ads__form {\\\\n    margin: 1.6rem 0; }\\\\n    .my-ads__form-container {\\\\n      display: flex;\\\\n      width: 41rem; }\\\\n    .my-ads__form-field {\\\\n      margin: 1rem 1.8rem 1.8rem 0; }\\\\n      .my-ads__form-field .dc-autocomplete__field {\\\\n        margin-bottom: 0; }\\\\n      .my-ads__form-field .dc-input__label {\\\\n        top: 1.2rem; }\\\\n      .my-ads__form-field--single {\\\\n        width: 18.9rem; }\\\\n      .my-ads__form-field--textarea {\\\\n        width: 57rem; }\\\\n      .my-ads__form-field--trailing {\\\\n        font-size: var(--text-size-xxs);\\\\n        color: var(--text-less-prominent); }\\\\n    .my-ads__form-footer {\\\\n      height: 7.2rem;\\\\n      width: 100%;\\\\n      position: absolute;\\\\n      bottom: 0;\\\\n      left: 0;\\\\n      display: flex;\\\\n      align-items: center;\\\\n      justify-content: flex-end;\\\\n      border-top: 1px solid var(--general-section-1);\\\\n      padding-right: 1.6rem; }\\\\n      .my-ads__form-footer > button:first-of-type {\\\\n        margin-right: 0.8rem; }\\\\n\\\\n.toggle-ads {\\\\n  align-items: center;\\\\n  display: flex;\\\\n  font-size: var(--text-size-s);\\\\n  justify-items: flex-start;\\\\n  margin-left: 2.4rem;\\\\n  width: 100%; }\\\\n  .toggle-ads__switch {\\\\n    transform: scale(0.5) translateX(-50%); }\\\\n  .toggle-ads__message {\\\\n    margin-left: -3.4rem; }\\\\n  .toggle-ads--on {\\\\n    color: var(--text-profit-success); }\\\\n  .toggle-ads--off {\\\\n    color: var(--text-less-prominent); }\\\\n\\\", \\\"\\\"]);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8hLi9zcmMvY29tcG9uZW50cy9teS1hZHMvbXktYWRzLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvLi9zcmMvY29tcG9uZW50cy9teS1hZHMvbXktYWRzLnNjc3M/ZmQ0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcbiAqICAjIENvbnN0YW50c1xcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cXG4vKiBzdHlsZWxpbnQtZGlzYWJsZSBjb2xvci1uby1oZXggKi9cXG4vKiBDT0xPUiBQQUxFVFRFICovXFxuLyogY29sb3JzICovXFxuLyogYWxwaGEgY29sb3JzICovXFxuLyogZ3JhZGllbnQgY29sb3JzICovXFxuLyogUHJlc2VydmUgbGVnYWN5IHZhcmlhYmxlcyAqL1xcbi8qIFByaW1hcnkgKi9cXG4vKiBzdHlsZWxpbnQtZW5hYmxlIGNvbG9yLW5vLWhleCAqL1xcbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcbiAqICAjIFNBU1MgTWl4aW5zIGFuZCBGdW5jdGlvbnNcXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXFxuLypcXG4gKiBTQVNTIGludGVycG9sYXRpb25cXG4gKi9cXG4vKlxcbiAqIFBYIHRvIEVNXFxuICogQHBhcmFtICRweCAtIHB4IHZhbHVlIHRvIGJlIGNvbnZlcnRlZFxcbiAqIEBwYXJhbSAkYmFzZSAtIGJhc2UgZm9udCBzaXplIChpbiBgZW1gKVxcbiAqIE5vdGU6ICdlbScgdmFsdWVzIGFyZSBjYWxjdWxhdGUgYmFzZWQgb24gdGhlIGVsZW1lbnQgZm9udC1zaXplXFxuICogICAgICAgdG8gcHJvcGVybHkgY29udmVydHMgJ3B4JyB0byAnZW0nLCBwbGVhc2UgcGFzcyBpbiB0aGUgZWxlbWVudCBmb250LXNpemUgd2l0aCBpdFxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgIHBhZGRpbmc6IGVtKDE2cHgsIDEuNmVtKTsgLy8gZm9udC1zaXplIGluICdlbSdcXG4gKi9cXG4vKlxcbiAqIFNldCBwcm9wZXJ0eSBieSBwYXNzaW5nIGEgcHJvcGVydHkgbmFtZSwgYW5kIHZhbHVlcy5cXG4gKiBAcGFyYW0gJHByb3BlcnR5IG5hbWUgLSBwYWRkaW5nLCBtYXJnaW4gZXRjLlxcbiAqIEBwYXJhbSAkdmFsdWVzICAgICAgICAtIHZhbHVlcyBpbiBgcHhgIChzcGFjZSBzZXBhcmF0ZWQgZm9yIG11bHRpcGxlIHZhbHVlcylcXG4gKiBAcGFyYW0gJGZvbnQtc2l6ZSAgICAgLSBiYXNlIGZvbnQtc2l6ZSBpbiBgZW1gXFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSB0b0VtKHBhZGRpbmcsIDhweCAxNnB4IDhweCwgMS42ZW0pO1xcbiAqL1xcbi8qXFxuICogR2VuZXJhdGUgdHlwZWZhY2VzIGtleS12YWx1ZSBwYWlyIG9mIHZhcmlhYmxlIG5hbWUgYW5kIGNvbmZpZ1xcbiAqIEV4YW1wbGU6XFxuICAgLS1wYXJhZ3JhcGgtY2VudGVyLWJvbGQtYmxhY2s6ICgxNHB4LCBjZW50ZXIsIGJvbGQsIGJsYWNrKVxcbiAqL1xcbi8qXFxuICogU2V0cyBmb250LXNpemUsIGZvbnQtd2VpZ2h0LCBjb2xvciwgdGV4dC10cmFuc2Zvcm0sIHRleHQtYWxpZ24gYW5kIGxpbmUtaGVpZ2h0XFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSBzZXRUeXBlZmFjZSgxNnB4LCBib2xkLCBibGFjaywgdXBwZXJjYXNlKTtcXG4gKi9cXG4vKlxcbiAqIFNldCB0eXBlZmFjZXMgYnkgcGFzc2luZyBhIHR5cGVmYWNlIHZhcmlhYmxlIG5hbWVcXG4gKiBAcGFyYW0gJHZhciAgIC0gdHlwZWZhY2UgdmFyaWFibGVcXG4gKiBAcGFyYW0gJHR0ICAgIC0gdGV4dC10cmFuc2Zvcm0gcHJvcGVydHlcXG4gKiBAcGFyYW0gJGFsaWduIC0gdGV4dC1hbGlnbiBwcm9wZXJ0eVxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgdHlwZWZhY2UoLS1wYXJhZ3JhcGgtYm9sZC1ibGFjaywgdXBwZXJjYXNlLCBjZW50ZXIpO1xcbiAqL1xcbi8qXFxuICogUmFuZ2UgU2xpZGVyIFRodW1iIHN0eWxpbmcgaXMgc2V0IGhlcmVcXG4gKi9cXG4vKlxcbiAqIFNWRyBpY29ucyBjb2xvcnNcXG4gKi9cXG4vKlxcbiAqIEJhciBTcGlubmVyIEFuaW1hdGlvblxcbiAqIEBwYXJhbSAkY291bnQgICAgLSBudW1iZXIgb2YgYmFyc1xcbiAqIEBwYXJhbSAkZHVyYXRpb24gLSBkdXJhdGlvbiBvZiBhbmltYXRpb25cXG4gKiBAcGFyYW0gJHBoYXNlICAgIC0gZWFjaCBiYXIgcGhhc2UgY2hhbmdlIGRlbGF5XFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSBjcmVhdGVCYXJzcGlubmVyQW5pbWF0aW9uKDUsIDEuMnMsIDAsMSk7XFxuICovXFxuLypcXG4gKiBUb29sdGlwIGNvbG9yc1xcbiAqIEBwYXJhbSAkY29sb3IgLSBjb2xvciBwcm9wZXJ0eVxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgdG9vbHRpcENvbG9yKCRDT0xPUl9SRUQpO1xcbiAqL1xcbi8qXFxuICogQ29udmVydCBUb29sdGlwIGNvbG9yc1xcbiAqIEBwYXJhbSAkY29sb3IgLSBjc3MgY29sb3IgcHJvcGVydHlcXG4gKiBVc2FnZSBleGFtcGxlOlxcbiAgIEBpbmNsdWRlIGNvbnZlcnRUb29sdGlwQ29sb3IodmFyKC0tc3RhdHVzLWRlZmF1bHQpKTtcXG4gKi9cXG4vKlxcbiAgICBDb25zdGFudHNcXG4qL1xcbi8qXFxuICAgIFZhcmlhYmxlc1xcbiovXFxuLypcXG4gICAgTGlzdCBvZiBhbGwgdHlwZWZhY2VzIHZhcmlhYmxlcyBpbiB0aGUgZm9ybWF0OiAtLSRGT05UX1NJWkVTLSRURVhUX0FMSUdOLSRGT05UX1dFSUdIVFMtQ09MT1JTLlxcbiAgICBTZWUgJEZPTlRfU0laRVMsICRURVhUX0FMSUdOLCAkRk9OVF9XRUlHSFRTLCAkQ09MT1JTIG1hcHMgYWJvdmUgZm9yIHJlZmVyZW5jZXMuXFxuICAgIFZhcmlhYmxlcyBuYW1lIGV4YW1wbGU6IC0tdGl0bGUtY2VudGVyLXNlbWlib2xkLXJlZFxcbiAqL1xcbi8qXFxuICAgIHRvIHVzZSBzdHlsZXMgd2l0aG91dCBtb2RpZmllciBjbGFzcyBvbiAuaW5saW5lLWljb25cXG4gICAgdXNlIEBleHRlbmRcXG5cXG4gICAgZS5nLiBzdHlsZSBpY29uIG9uIHBhcmVudCBob3ZlcjpcXG4gICAgICAgIGE6aG92ZXIgLmlubGluZS1pY29uIHtcXG4gICAgICAgICAgICBAZXh0ZW5kICVpbmxpbmUtaWNvbi5hY3RpdmU7XFxuICAgICAgICB9XFxuKi9cXG4ubXktYWRzIHtcXG4gIHBhZGRpbmc6IDEuNnJlbTsgfVxcbiAgLm15LWFkc19faGVhZGVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgfVxcbiAgLm15LWFkc19faGVhZGluZy13cmFwcGVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDEuNnJlbTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjc1O1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1nZW5lcmFsKTsgfVxcbiAgLm15LWFkc19faGVhZGluZy1idG4ge1xcbiAgICBwYWRkaW5nOiAwLjRyZW0gMS42cmVtIDAgMDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7IH1cXG4gIC5teS1hZHNfX2Zvcm0ge1xcbiAgICBtYXJnaW46IDEuNnJlbSAwOyB9XFxuICAgIC5teS1hZHNfX2Zvcm0tY29udGFpbmVyIHtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIHdpZHRoOiA0MXJlbTsgfVxcbiAgICAubXktYWRzX19mb3JtLWZpZWxkIHtcXG4gICAgICBtYXJnaW46IDFyZW0gMS44cmVtIDEuOHJlbSAwOyB9XFxuICAgICAgLm15LWFkc19fZm9ybS1maWVsZCAuZGMtYXV0b2NvbXBsZXRlX19maWVsZCB7XFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAwOyB9XFxuICAgICAgLm15LWFkc19fZm9ybS1maWVsZCAuZGMtaW5wdXRfX2xhYmVsIHtcXG4gICAgICAgIHRvcDogMS4ycmVtOyB9XFxuICAgICAgLm15LWFkc19fZm9ybS1maWVsZC0tc2luZ2xlIHtcXG4gICAgICAgIHdpZHRoOiAxOC45cmVtOyB9XFxuICAgICAgLm15LWFkc19fZm9ybS1maWVsZC0tdGV4dGFyZWEge1xcbiAgICAgICAgd2lkdGg6IDU3cmVtOyB9XFxuICAgICAgLm15LWFkc19fZm9ybS1maWVsZC0tdHJhaWxpbmcge1xcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS10ZXh0LXNpemUteHhzKTtcXG4gICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWxlc3MtcHJvbWluZW50KTsgfVxcbiAgICAubXktYWRzX19mb3JtLWZvb3RlciB7XFxuICAgICAgaGVpZ2h0OiA3LjJyZW07XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIGJvdHRvbTogMDtcXG4gICAgICBsZWZ0OiAwO1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1nZW5lcmFsLXNlY3Rpb24tMSk7XFxuICAgICAgcGFkZGluZy1yaWdodDogMS42cmVtOyB9XFxuICAgICAgLm15LWFkc19fZm9ybS1mb290ZXIgPiBidXR0b246Zmlyc3Qtb2YtdHlwZSB7XFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuOHJlbTsgfVxcblxcbi50b2dnbGUtYWRzIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZm9udC1zaXplOiB2YXIoLS10ZXh0LXNpemUtcyk7XFxuICBqdXN0aWZ5LWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgbWFyZ2luLWxlZnQ6IDIuNHJlbTtcXG4gIHdpZHRoOiAxMDAlOyB9XFxuICAudG9nZ2xlLWFkc19fc3dpdGNoIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjUpIHRyYW5zbGF0ZVgoLTUwJSk7IH1cXG4gIC50b2dnbGUtYWRzX19tZXNzYWdlIHtcXG4gICAgbWFyZ2luLWxlZnQ6IC0zLjRyZW07IH1cXG4gIC50b2dnbGUtYWRzLS1vbiB7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LXByb2ZpdC1zdWNjZXNzKTsgfVxcbiAgLnRvZ2dsZS1hZHMtLW9mZiB7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWxlc3MtcHJvbWluZW50KTsgfVxcblwiLCBcIlwiXSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/my-ads/my-ads.scss\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/my-profile/my-profile.scss\":\n/*!*********************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./src/components/my-profile/my-profile.scss ***!\n  \\*********************************************************************************************************************************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \\\"./node_modules/css-loader/dist/runtime/api.js\\\")(false);\\n// Module\\nexports.push([module.i, \\\"/*------------------------------------*\\\\n *  # Constants\\\\n *------------------------------------*/\\\\n/* stylelint-disable color-no-hex */\\\\n/* COLOR PALETTE */\\\\n/* colors */\\\\n/* alpha colors */\\\\n/* gradient colors */\\\\n/* Preserve legacy variables */\\\\n/* Primary */\\\\n/* stylelint-enable color-no-hex */\\\\n/*------------------------------------*\\\\n *  # SASS Mixins and Functions\\\\n *------------------------------------*/\\\\n/*\\\\n * SASS interpolation\\\\n */\\\\n/*\\\\n * PX to EM\\\\n * @param $px - px value to be converted\\\\n * @param $base - base font size (in `em`)\\\\n * Note: 'em' values are calculate based on the element font-size\\\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\\\n * Usage example:\\\\n    padding: em(16px, 1.6em); // font-size in 'em'\\\\n */\\\\n/*\\\\n * Set property by passing a property name, and values.\\\\n * @param $property name - padding, margin etc.\\\\n * @param $values        - values in `px` (space separated for multiple values)\\\\n * @param $font-size     - base font-size in `em`\\\\n * Usage example:\\\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\\\n */\\\\n/*\\\\n * Generate typefaces key-value pair of variable name and config\\\\n * Example:\\\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\\\n */\\\\n/*\\\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\\\n * Usage example:\\\\n   @include setTypeface(16px, bold, black, uppercase);\\\\n */\\\\n/*\\\\n * Set typefaces by passing a typeface variable name\\\\n * @param $var   - typeface variable\\\\n * @param $tt    - text-transform property\\\\n * @param $align - text-align property\\\\n * Usage example:\\\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\\\n */\\\\n/*\\\\n * Range Slider Thumb styling is set here\\\\n */\\\\n/*\\\\n * SVG icons colors\\\\n */\\\\n/*\\\\n * Bar Spinner Animation\\\\n * @param $count    - number of bars\\\\n * @param $duration - duration of animation\\\\n * @param $phase    - each bar phase change delay\\\\n * Usage example:\\\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\\\n */\\\\n/*\\\\n * Tooltip colors\\\\n * @param $color - color property\\\\n * Usage example:\\\\n   @include tooltipColor($COLOR_RED);\\\\n */\\\\n/*\\\\n * Convert Tooltip colors\\\\n * @param $color - css color property\\\\n * Usage example:\\\\n   @include convertTooltipColor(var(--status-default));\\\\n */\\\\n/*\\\\n    Constants\\\\n*/\\\\n/*\\\\n    Variables\\\\n*/\\\\n/*\\\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\\\n    Variables name example: --title-center-semibold-red\\\\n */\\\\n/*\\\\n    to use styles without modifier class on .inline-icon\\\\n    use @extend\\\\n\\\\n    e.g. style icon on parent hover:\\\\n        a:hover .inline-icon {\\\\n            @extend %inline-icon.active;\\\\n        }\\\\n*/\\\\n\\\", \\\"\\\"]);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8hLi9zcmMvY29tcG9uZW50cy9teS1wcm9maWxlL215LXByb2ZpbGUuc2Nzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC8uL3NyYy9jb21wb25lbnRzL215LXByb2ZpbGUvbXktcHJvZmlsZS5zY3NzP2M1YTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXG4gKiAgIyBDb25zdGFudHNcXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXFxuLyogc3R5bGVsaW50LWRpc2FibGUgY29sb3Itbm8taGV4ICovXFxuLyogQ09MT1IgUEFMRVRURSAqL1xcbi8qIGNvbG9ycyAqL1xcbi8qIGFscGhhIGNvbG9ycyAqL1xcbi8qIGdyYWRpZW50IGNvbG9ycyAqL1xcbi8qIFByZXNlcnZlIGxlZ2FjeSB2YXJpYWJsZXMgKi9cXG4vKiBQcmltYXJ5ICovXFxuLyogc3R5bGVsaW50LWVuYWJsZSBjb2xvci1uby1oZXggKi9cXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSpcXG4gKiAgIyBTQVNTIE1peGlucyBhbmQgRnVuY3Rpb25zXFxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbi8qXFxuICogU0FTUyBpbnRlcnBvbGF0aW9uXFxuICovXFxuLypcXG4gKiBQWCB0byBFTVxcbiAqIEBwYXJhbSAkcHggLSBweCB2YWx1ZSB0byBiZSBjb252ZXJ0ZWRcXG4gKiBAcGFyYW0gJGJhc2UgLSBiYXNlIGZvbnQgc2l6ZSAoaW4gYGVtYClcXG4gKiBOb3RlOiAnZW0nIHZhbHVlcyBhcmUgY2FsY3VsYXRlIGJhc2VkIG9uIHRoZSBlbGVtZW50IGZvbnQtc2l6ZVxcbiAqICAgICAgIHRvIHByb3Blcmx5IGNvbnZlcnRzICdweCcgdG8gJ2VtJywgcGxlYXNlIHBhc3MgaW4gdGhlIGVsZW1lbnQgZm9udC1zaXplIHdpdGggaXRcXG4gKiBVc2FnZSBleGFtcGxlOlxcbiAgICBwYWRkaW5nOiBlbSgxNnB4LCAxLjZlbSk7IC8vIGZvbnQtc2l6ZSBpbiAnZW0nXFxuICovXFxuLypcXG4gKiBTZXQgcHJvcGVydHkgYnkgcGFzc2luZyBhIHByb3BlcnR5IG5hbWUsIGFuZCB2YWx1ZXMuXFxuICogQHBhcmFtICRwcm9wZXJ0eSBuYW1lIC0gcGFkZGluZywgbWFyZ2luIGV0Yy5cXG4gKiBAcGFyYW0gJHZhbHVlcyAgICAgICAgLSB2YWx1ZXMgaW4gYHB4YCAoc3BhY2Ugc2VwYXJhdGVkIGZvciBtdWx0aXBsZSB2YWx1ZXMpXFxuICogQHBhcmFtICRmb250LXNpemUgICAgIC0gYmFzZSBmb250LXNpemUgaW4gYGVtYFxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgdG9FbShwYWRkaW5nLCA4cHggMTZweCA4cHgsIDEuNmVtKTtcXG4gKi9cXG4vKlxcbiAqIEdlbmVyYXRlIHR5cGVmYWNlcyBrZXktdmFsdWUgcGFpciBvZiB2YXJpYWJsZSBuYW1lIGFuZCBjb25maWdcXG4gKiBFeGFtcGxlOlxcbiAgIC0tcGFyYWdyYXBoLWNlbnRlci1ib2xkLWJsYWNrOiAoMTRweCwgY2VudGVyLCBib2xkLCBibGFjaylcXG4gKi9cXG4vKlxcbiAqIFNldHMgZm9udC1zaXplLCBmb250LXdlaWdodCwgY29sb3IsIHRleHQtdHJhbnNmb3JtLCB0ZXh0LWFsaWduIGFuZCBsaW5lLWhlaWdodFxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgc2V0VHlwZWZhY2UoMTZweCwgYm9sZCwgYmxhY2ssIHVwcGVyY2FzZSk7XFxuICovXFxuLypcXG4gKiBTZXQgdHlwZWZhY2VzIGJ5IHBhc3NpbmcgYSB0eXBlZmFjZSB2YXJpYWJsZSBuYW1lXFxuICogQHBhcmFtICR2YXIgICAtIHR5cGVmYWNlIHZhcmlhYmxlXFxuICogQHBhcmFtICR0dCAgICAtIHRleHQtdHJhbnNmb3JtIHByb3BlcnR5XFxuICogQHBhcmFtICRhbGlnbiAtIHRleHQtYWxpZ24gcHJvcGVydHlcXG4gKiBVc2FnZSBleGFtcGxlOlxcbiAgIEBpbmNsdWRlIHR5cGVmYWNlKC0tcGFyYWdyYXBoLWJvbGQtYmxhY2ssIHVwcGVyY2FzZSwgY2VudGVyKTtcXG4gKi9cXG4vKlxcbiAqIFJhbmdlIFNsaWRlciBUaHVtYiBzdHlsaW5nIGlzIHNldCBoZXJlXFxuICovXFxuLypcXG4gKiBTVkcgaWNvbnMgY29sb3JzXFxuICovXFxuLypcXG4gKiBCYXIgU3Bpbm5lciBBbmltYXRpb25cXG4gKiBAcGFyYW0gJGNvdW50ICAgIC0gbnVtYmVyIG9mIGJhcnNcXG4gKiBAcGFyYW0gJGR1cmF0aW9uIC0gZHVyYXRpb24gb2YgYW5pbWF0aW9uXFxuICogQHBhcmFtICRwaGFzZSAgICAtIGVhY2ggYmFyIHBoYXNlIGNoYW5nZSBkZWxheVxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgY3JlYXRlQmFyc3Bpbm5lckFuaW1hdGlvbig1LCAxLjJzLCAwLDEpO1xcbiAqL1xcbi8qXFxuICogVG9vbHRpcCBjb2xvcnNcXG4gKiBAcGFyYW0gJGNvbG9yIC0gY29sb3IgcHJvcGVydHlcXG4gKiBVc2FnZSBleGFtcGxlOlxcbiAgIEBpbmNsdWRlIHRvb2x0aXBDb2xvcigkQ09MT1JfUkVEKTtcXG4gKi9cXG4vKlxcbiAqIENvbnZlcnQgVG9vbHRpcCBjb2xvcnNcXG4gKiBAcGFyYW0gJGNvbG9yIC0gY3NzIGNvbG9yIHByb3BlcnR5XFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSBjb252ZXJ0VG9vbHRpcENvbG9yKHZhcigtLXN0YXR1cy1kZWZhdWx0KSk7XFxuICovXFxuLypcXG4gICAgQ29uc3RhbnRzXFxuKi9cXG4vKlxcbiAgICBWYXJpYWJsZXNcXG4qL1xcbi8qXFxuICAgIExpc3Qgb2YgYWxsIHR5cGVmYWNlcyB2YXJpYWJsZXMgaW4gdGhlIGZvcm1hdDogLS0kRk9OVF9TSVpFUy0kVEVYVF9BTElHTi0kRk9OVF9XRUlHSFRTLUNPTE9SUy5cXG4gICAgU2VlICRGT05UX1NJWkVTLCAkVEVYVF9BTElHTiwgJEZPTlRfV0VJR0hUUywgJENPTE9SUyBtYXBzIGFib3ZlIGZvciByZWZlcmVuY2VzLlxcbiAgICBWYXJpYWJsZXMgbmFtZSBleGFtcGxlOiAtLXRpdGxlLWNlbnRlci1zZW1pYm9sZC1yZWRcXG4gKi9cXG4vKlxcbiAgICB0byB1c2Ugc3R5bGVzIHdpdGhvdXQgbW9kaWZpZXIgY2xhc3Mgb24gLmlubGluZS1pY29uXFxuICAgIHVzZSBAZXh0ZW5kXFxuXFxuICAgIGUuZy4gc3R5bGUgaWNvbiBvbiBwYXJlbnQgaG92ZXI6XFxuICAgICAgICBhOmhvdmVyIC5pbmxpbmUtaWNvbiB7XFxuICAgICAgICAgICAgQGV4dGVuZCAlaW5saW5lLWljb24uYWN0aXZlO1xcbiAgICAgICAgfVxcbiovXFxuXCIsIFwiXCJdKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/my-profile/my-profile.scss\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/orders/orders.scss\":\n/*!*************************************************************************************************************************************************************************************!*\\\n  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./src/components/orders/orders.scss ***!\n  \\*************************************************************************************************************************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \\\"./node_modules/css-loader/dist/runtime/api.js\\\")(false);\\n// Module\\nexports.push([module.i, \\\"/*------------------------------------*\\\\n *  # Constants\\\\n *------------------------------------*/\\\\n/* stylelint-disable color-no-hex */\\\\n/* COLOR PALETTE */\\\\n/* colors */\\\\n/* alpha colors */\\\\n/* gradient colors */\\\\n/* Preserve legacy variables */\\\\n/* Primary */\\\\n/* stylelint-enable color-no-hex */\\\\n/*------------------------------------*\\\\n *  # SASS Mixins and Functions\\\\n *------------------------------------*/\\\\n/*\\\\n * SASS interpolation\\\\n */\\\\n/*\\\\n * PX to EM\\\\n * @param $px - px value to be converted\\\\n * @param $base - base font size (in `em`)\\\\n * Note: 'em' values are calculate based on the element font-size\\\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\\\n * Usage example:\\\\n    padding: em(16px, 1.6em); // font-size in 'em'\\\\n */\\\\n/*\\\\n * Set property by passing a property name, and values.\\\\n * @param $property name - padding, margin etc.\\\\n * @param $values        - values in `px` (space separated for multiple values)\\\\n * @param $font-size     - base font-size in `em`\\\\n * Usage example:\\\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\\\n */\\\\n/*\\\\n * Generate typefaces key-value pair of variable name and config\\\\n * Example:\\\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\\\n */\\\\n/*\\\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\\\n * Usage example:\\\\n   @include setTypeface(16px, bold, black, uppercase);\\\\n */\\\\n/*\\\\n * Set typefaces by passing a typeface variable name\\\\n * @param $var   - typeface variable\\\\n * @param $tt    - text-transform property\\\\n * @param $align - text-align property\\\\n * Usage example:\\\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\\\n */\\\\n/*\\\\n * Range Slider Thumb styling is set here\\\\n */\\\\n/*\\\\n * SVG icons colors\\\\n */\\\\n/*\\\\n * Bar Spinner Animation\\\\n * @param $count    - number of bars\\\\n * @param $duration - duration of animation\\\\n * @param $phase    - each bar phase change delay\\\\n * Usage example:\\\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\\\n */\\\\n/*\\\\n * Tooltip colors\\\\n * @param $color - color property\\\\n * Usage example:\\\\n   @include tooltipColor($COLOR_RED);\\\\n */\\\\n/*\\\\n * Convert Tooltip colors\\\\n * @param $color - css color property\\\\n * Usage example:\\\\n   @include convertTooltipColor(var(--status-default));\\\\n */\\\\n/*\\\\n    Constants\\\\n*/\\\\n/*\\\\n    Variables\\\\n*/\\\\n/*\\\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\\\n    Variables name example: --title-center-semibold-red\\\\n */\\\\n/*\\\\n    to use styles without modifier class on .inline-icon\\\\n    use @extend\\\\n\\\\n    e.g. style icon on parent hover:\\\\n        a:hover .inline-icon {\\\\n            @extend %inline-icon.active;\\\\n        }\\\\n*/\\\\n\\\", \\\"\\\"]);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8hLi9zcmMvY29tcG9uZW50cy9vcmRlcnMvb3JkZXJzLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvLi9zcmMvY29tcG9uZW50cy9vcmRlcnMvb3JkZXJzLnNjc3M/OTYyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcbiAqICAjIENvbnN0YW50c1xcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cXG4vKiBzdHlsZWxpbnQtZGlzYWJsZSBjb2xvci1uby1oZXggKi9cXG4vKiBDT0xPUiBQQUxFVFRFICovXFxuLyogY29sb3JzICovXFxuLyogYWxwaGEgY29sb3JzICovXFxuLyogZ3JhZGllbnQgY29sb3JzICovXFxuLyogUHJlc2VydmUgbGVnYWN5IHZhcmlhYmxlcyAqL1xcbi8qIFByaW1hcnkgKi9cXG4vKiBzdHlsZWxpbnQtZW5hYmxlIGNvbG9yLW5vLWhleCAqL1xcbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxcbiAqICAjIFNBU1MgTWl4aW5zIGFuZCBGdW5jdGlvbnNcXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXFxuLypcXG4gKiBTQVNTIGludGVycG9sYXRpb25cXG4gKi9cXG4vKlxcbiAqIFBYIHRvIEVNXFxuICogQHBhcmFtICRweCAtIHB4IHZhbHVlIHRvIGJlIGNvbnZlcnRlZFxcbiAqIEBwYXJhbSAkYmFzZSAtIGJhc2UgZm9udCBzaXplIChpbiBgZW1gKVxcbiAqIE5vdGU6ICdlbScgdmFsdWVzIGFyZSBjYWxjdWxhdGUgYmFzZWQgb24gdGhlIGVsZW1lbnQgZm9udC1zaXplXFxuICogICAgICAgdG8gcHJvcGVybHkgY29udmVydHMgJ3B4JyB0byAnZW0nLCBwbGVhc2UgcGFzcyBpbiB0aGUgZWxlbWVudCBmb250LXNpemUgd2l0aCBpdFxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgIHBhZGRpbmc6IGVtKDE2cHgsIDEuNmVtKTsgLy8gZm9udC1zaXplIGluICdlbSdcXG4gKi9cXG4vKlxcbiAqIFNldCBwcm9wZXJ0eSBieSBwYXNzaW5nIGEgcHJvcGVydHkgbmFtZSwgYW5kIHZhbHVlcy5cXG4gKiBAcGFyYW0gJHByb3BlcnR5IG5hbWUgLSBwYWRkaW5nLCBtYXJnaW4gZXRjLlxcbiAqIEBwYXJhbSAkdmFsdWVzICAgICAgICAtIHZhbHVlcyBpbiBgcHhgIChzcGFjZSBzZXBhcmF0ZWQgZm9yIG11bHRpcGxlIHZhbHVlcylcXG4gKiBAcGFyYW0gJGZvbnQtc2l6ZSAgICAgLSBiYXNlIGZvbnQtc2l6ZSBpbiBgZW1gXFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSB0b0VtKHBhZGRpbmcsIDhweCAxNnB4IDhweCwgMS42ZW0pO1xcbiAqL1xcbi8qXFxuICogR2VuZXJhdGUgdHlwZWZhY2VzIGtleS12YWx1ZSBwYWlyIG9mIHZhcmlhYmxlIG5hbWUgYW5kIGNvbmZpZ1xcbiAqIEV4YW1wbGU6XFxuICAgLS1wYXJhZ3JhcGgtY2VudGVyLWJvbGQtYmxhY2s6ICgxNHB4LCBjZW50ZXIsIGJvbGQsIGJsYWNrKVxcbiAqL1xcbi8qXFxuICogU2V0cyBmb250LXNpemUsIGZvbnQtd2VpZ2h0LCBjb2xvciwgdGV4dC10cmFuc2Zvcm0sIHRleHQtYWxpZ24gYW5kIGxpbmUtaGVpZ2h0XFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSBzZXRUeXBlZmFjZSgxNnB4LCBib2xkLCBibGFjaywgdXBwZXJjYXNlKTtcXG4gKi9cXG4vKlxcbiAqIFNldCB0eXBlZmFjZXMgYnkgcGFzc2luZyBhIHR5cGVmYWNlIHZhcmlhYmxlIG5hbWVcXG4gKiBAcGFyYW0gJHZhciAgIC0gdHlwZWZhY2UgdmFyaWFibGVcXG4gKiBAcGFyYW0gJHR0ICAgIC0gdGV4dC10cmFuc2Zvcm0gcHJvcGVydHlcXG4gKiBAcGFyYW0gJGFsaWduIC0gdGV4dC1hbGlnbiBwcm9wZXJ0eVxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgdHlwZWZhY2UoLS1wYXJhZ3JhcGgtYm9sZC1ibGFjaywgdXBwZXJjYXNlLCBjZW50ZXIpO1xcbiAqL1xcbi8qXFxuICogUmFuZ2UgU2xpZGVyIFRodW1iIHN0eWxpbmcgaXMgc2V0IGhlcmVcXG4gKi9cXG4vKlxcbiAqIFNWRyBpY29ucyBjb2xvcnNcXG4gKi9cXG4vKlxcbiAqIEJhciBTcGlubmVyIEFuaW1hdGlvblxcbiAqIEBwYXJhbSAkY291bnQgICAgLSBudW1iZXIgb2YgYmFyc1xcbiAqIEBwYXJhbSAkZHVyYXRpb24gLSBkdXJhdGlvbiBvZiBhbmltYXRpb25cXG4gKiBAcGFyYW0gJHBoYXNlICAgIC0gZWFjaCBiYXIgcGhhc2UgY2hhbmdlIGRlbGF5XFxuICogVXNhZ2UgZXhhbXBsZTpcXG4gICBAaW5jbHVkZSBjcmVhdGVCYXJzcGlubmVyQW5pbWF0aW9uKDUsIDEuMnMsIDAsMSk7XFxuICovXFxuLypcXG4gKiBUb29sdGlwIGNvbG9yc1xcbiAqIEBwYXJhbSAkY29sb3IgLSBjb2xvciBwcm9wZXJ0eVxcbiAqIFVzYWdlIGV4YW1wbGU6XFxuICAgQGluY2x1ZGUgdG9vbHRpcENvbG9yKCRDT0xPUl9SRUQpO1xcbiAqL1xcbi8qXFxuICogQ29udmVydCBUb29sdGlwIGNvbG9yc1xcbiAqIEBwYXJhbSAkY29sb3IgLSBjc3MgY29sb3IgcHJvcGVydHlcXG4gKiBVc2FnZSBleGFtcGxlOlxcbiAgIEBpbmNsdWRlIGNvbnZlcnRUb29sdGlwQ29sb3IodmFyKC0tc3RhdHVzLWRlZmF1bHQpKTtcXG4gKi9cXG4vKlxcbiAgICBDb25zdGFudHNcXG4qL1xcbi8qXFxuICAgIFZhcmlhYmxlc1xcbiovXFxuLypcXG4gICAgTGlzdCBvZiBhbGwgdHlwZWZhY2VzIHZhcmlhYmxlcyBpbiB0aGUgZm9ybWF0OiAtLSRGT05UX1NJWkVTLSRURVhUX0FMSUdOLSRGT05UX1dFSUdIVFMtQ09MT1JTLlxcbiAgICBTZWUgJEZPTlRfU0laRVMsICRURVhUX0FMSUdOLCAkRk9OVF9XRUlHSFRTLCAkQ09MT1JTIG1hcHMgYWJvdmUgZm9yIHJlZmVyZW5jZXMuXFxuICAgIFZhcmlhYmxlcyBuYW1lIGV4YW1wbGU6IC0tdGl0bGUtY2VudGVyLXNlbWlib2xkLXJlZFxcbiAqL1xcbi8qXFxuICAgIHRvIHVzZSBzdHlsZXMgd2l0aG91dCBtb2RpZmllciBjbGFzcyBvbiAuaW5saW5lLWljb25cXG4gICAgdXNlIEBleHRlbmRcXG5cXG4gICAgZS5nLiBzdHlsZSBpY29uIG9uIHBhcmVudCBob3ZlcjpcXG4gICAgICAgIGE6aG92ZXIgLmlubGluZS1pY29uIHtcXG4gICAgICAgICAgICBAZXh0ZW5kICVpbmxpbmUtaWNvbi5hY3RpdmU7XFxuICAgICAgICB9XFxuKi9cXG5cIiwgXCJcIl0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/orders/orders.scss\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/css-loader/dist/runtime/api.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/css-loader/dist/runtime/api.js ***!\n  \\*****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\n/*\\n  MIT License http://www.opensource.org/licenses/mit-license.php\\n  Author Tobias Koppers @sokra\\n*/\\n// css base code, injected by the css-loader\\n// eslint-disable-next-line func-names\\nmodule.exports = function (useSourceMap) {\\n  var list = []; // return the list of modules as css string\\n\\n  list.toString = function toString() {\\n    return this.map(function (item) {\\n      var content = cssWithMappingToString(item, useSourceMap);\\n\\n      if (item[2]) {\\n        return \\\"@media \\\".concat(item[2], \\\"{\\\").concat(content, \\\"}\\\");\\n      }\\n\\n      return content;\\n    }).join('');\\n  }; // import a list of modules into the list\\n  // eslint-disable-next-line func-names\\n\\n\\n  list.i = function (modules, mediaQuery) {\\n    if (typeof modules === 'string') {\\n      // eslint-disable-next-line no-param-reassign\\n      modules = [[null, modules, '']];\\n    }\\n\\n    var alreadyImportedModules = {};\\n\\n    for (var i = 0; i < this.length; i++) {\\n      // eslint-disable-next-line prefer-destructuring\\n      var id = this[i][0];\\n\\n      if (id != null) {\\n        alreadyImportedModules[id] = true;\\n      }\\n    }\\n\\n    for (var _i = 0; _i < modules.length; _i++) {\\n      var item = modules[_i]; // skip already imported module\\n      // this implementation is not 100% perfect for weird media query combinations\\n      // when a module is imported multiple times with different media queries.\\n      // I hope this will never occur (Hey this way we have smaller bundles)\\n\\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\\n        if (mediaQuery && !item[2]) {\\n          item[2] = mediaQuery;\\n        } else if (mediaQuery) {\\n          item[2] = \\\"(\\\".concat(item[2], \\\") and (\\\").concat(mediaQuery, \\\")\\\");\\n        }\\n\\n        list.push(item);\\n      }\\n    }\\n  };\\n\\n  return list;\\n};\\n\\nfunction cssWithMappingToString(item, useSourceMap) {\\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\\n\\n  var cssMapping = item[3];\\n\\n  if (!cssMapping) {\\n    return content;\\n  }\\n\\n  if (useSourceMap && typeof btoa === 'function') {\\n    var sourceMapping = toComment(cssMapping);\\n    var sourceURLs = cssMapping.sources.map(function (source) {\\n      return \\\"/*# sourceURL=\\\".concat(cssMapping.sourceRoot).concat(source, \\\" */\\\");\\n    });\\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\\\n');\\n  }\\n\\n  return [content].join('\\\\n');\\n} // Adapted from convert-source-map (MIT)\\n\\n\\nfunction toComment(sourceMap) {\\n  // eslint-disable-next-line no-undef\\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\\n  var data = \\\"sourceMappingURL=data:application/json;charset=utf-8;base64,\\\".concat(base64);\\n  return \\\"/*# \\\".concat(data, \\\" */\\\");\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwie1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW19pXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCIoXCIuY29uY2F0KGl0ZW1bMl0sIFwiKSBhbmQgKFwiKS5jb25jYXQobWVkaWFRdWVyeSwgXCIpXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/style-loader/lib/addStyles.js\":\n/*!****************************************************!*\\\n  !*** ./node_modules/style-loader/lib/addStyles.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"/*\\n\\tMIT License http://www.opensource.org/licenses/mit-license.php\\n\\tAuthor Tobias Koppers @sokra\\n*/\\n\\nvar stylesInDom = {};\\n\\nvar\\tmemoize = function (fn) {\\n\\tvar memo;\\n\\n\\treturn function () {\\n\\t\\tif (typeof memo === \\\"undefined\\\") memo = fn.apply(this, arguments);\\n\\t\\treturn memo;\\n\\t};\\n};\\n\\nvar isOldIE = memoize(function () {\\n\\t// Test for IE <= 9 as proposed by Browserhacks\\n\\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\\n\\t// Tests for existence of standard globals is to allow style-loader\\n\\t// to operate correctly into non-standard environments\\n\\t// @see https://github.com/webpack-contrib/style-loader/issues/177\\n\\treturn window && document && document.all && !window.atob;\\n});\\n\\nvar getTarget = function (target, parent) {\\n  if (parent){\\n    return parent.querySelector(target);\\n  }\\n  return document.querySelector(target);\\n};\\n\\nvar getElement = (function (fn) {\\n\\tvar memo = {};\\n\\n\\treturn function(target, parent) {\\n                // If passing function in options, then use it for resolve \\\"head\\\" element.\\n                // Useful for Shadow Root style i.e\\n                // {\\n                //   insertInto: function () { return document.querySelector(\\\"#foo\\\").shadowRoot }\\n                // }\\n                if (typeof target === 'function') {\\n                        return target();\\n                }\\n                if (typeof memo[target] === \\\"undefined\\\") {\\n\\t\\t\\tvar styleTarget = getTarget.call(this, target, parent);\\n\\t\\t\\t// Special case to return head of iframe instead of iframe itself\\n\\t\\t\\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t// This will throw an exception if access to iframe is blocked\\n\\t\\t\\t\\t\\t// due to cross-origin restrictions\\n\\t\\t\\t\\t\\tstyleTarget = styleTarget.contentDocument.head;\\n\\t\\t\\t\\t} catch(e) {\\n\\t\\t\\t\\t\\tstyleTarget = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tmemo[target] = styleTarget;\\n\\t\\t}\\n\\t\\treturn memo[target]\\n\\t};\\n})();\\n\\nvar singleton = null;\\nvar\\tsingletonCounter = 0;\\nvar\\tstylesInsertedAtTop = [];\\n\\nvar\\tfixUrls = __webpack_require__(/*! ./urls */ \\\"./node_modules/style-loader/lib/urls.js\\\");\\n\\nmodule.exports = function(list, options) {\\n\\tif (typeof DEBUG !== \\\"undefined\\\" && DEBUG) {\\n\\t\\tif (typeof document !== \\\"object\\\") throw new Error(\\\"The style-loader cannot be used in a non-browser environment\\\");\\n\\t}\\n\\n\\toptions = options || {};\\n\\n\\toptions.attrs = typeof options.attrs === \\\"object\\\" ? options.attrs : {};\\n\\n\\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\\n\\t// tags it will allow on a page\\n\\tif (!options.singleton && typeof options.singleton !== \\\"boolean\\\") options.singleton = isOldIE();\\n\\n\\t// By default, add <style> tags to the <head> element\\n        if (!options.insertInto) options.insertInto = \\\"head\\\";\\n\\n\\t// By default, add <style> tags to the bottom of the target\\n\\tif (!options.insertAt) options.insertAt = \\\"bottom\\\";\\n\\n\\tvar styles = listToStyles(list, options);\\n\\n\\taddStylesToDom(styles, options);\\n\\n\\treturn function update (newList) {\\n\\t\\tvar mayRemove = [];\\n\\n\\t\\tfor (var i = 0; i < styles.length; i++) {\\n\\t\\t\\tvar item = styles[i];\\n\\t\\t\\tvar domStyle = stylesInDom[item.id];\\n\\n\\t\\t\\tdomStyle.refs--;\\n\\t\\t\\tmayRemove.push(domStyle);\\n\\t\\t}\\n\\n\\t\\tif(newList) {\\n\\t\\t\\tvar newStyles = listToStyles(newList, options);\\n\\t\\t\\taddStylesToDom(newStyles, options);\\n\\t\\t}\\n\\n\\t\\tfor (var i = 0; i < mayRemove.length; i++) {\\n\\t\\t\\tvar domStyle = mayRemove[i];\\n\\n\\t\\t\\tif(domStyle.refs === 0) {\\n\\t\\t\\t\\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\\n\\n\\t\\t\\t\\tdelete stylesInDom[domStyle.id];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n};\\n\\nfunction addStylesToDom (styles, options) {\\n\\tfor (var i = 0; i < styles.length; i++) {\\n\\t\\tvar item = styles[i];\\n\\t\\tvar domStyle = stylesInDom[item.id];\\n\\n\\t\\tif(domStyle) {\\n\\t\\t\\tdomStyle.refs++;\\n\\n\\t\\t\\tfor(var j = 0; j < domStyle.parts.length; j++) {\\n\\t\\t\\t\\tdomStyle.parts[j](item.parts[j]);\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor(; j < item.parts.length; j++) {\\n\\t\\t\\t\\tdomStyle.parts.push(addStyle(item.parts[j], options));\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tvar parts = [];\\n\\n\\t\\t\\tfor(var j = 0; j < item.parts.length; j++) {\\n\\t\\t\\t\\tparts.push(addStyle(item.parts[j], options));\\n\\t\\t\\t}\\n\\n\\t\\t\\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction listToStyles (list, options) {\\n\\tvar styles = [];\\n\\tvar newStyles = {};\\n\\n\\tfor (var i = 0; i < list.length; i++) {\\n\\t\\tvar item = list[i];\\n\\t\\tvar id = options.base ? item[0] + options.base : item[0];\\n\\t\\tvar css = item[1];\\n\\t\\tvar media = item[2];\\n\\t\\tvar sourceMap = item[3];\\n\\t\\tvar part = {css: css, media: media, sourceMap: sourceMap};\\n\\n\\t\\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\\n\\t\\telse newStyles[id].parts.push(part);\\n\\t}\\n\\n\\treturn styles;\\n}\\n\\nfunction insertStyleElement (options, style) {\\n\\tvar target = getElement(options.insertInto)\\n\\n\\tif (!target) {\\n\\t\\tthrow new Error(\\\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\\\");\\n\\t}\\n\\n\\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\\n\\n\\tif (options.insertAt === \\\"top\\\") {\\n\\t\\tif (!lastStyleElementInsertedAtTop) {\\n\\t\\t\\ttarget.insertBefore(style, target.firstChild);\\n\\t\\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\\n\\t\\t\\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\\n\\t\\t} else {\\n\\t\\t\\ttarget.appendChild(style);\\n\\t\\t}\\n\\t\\tstylesInsertedAtTop.push(style);\\n\\t} else if (options.insertAt === \\\"bottom\\\") {\\n\\t\\ttarget.appendChild(style);\\n\\t} else if (typeof options.insertAt === \\\"object\\\" && options.insertAt.before) {\\n\\t\\tvar nextSibling = getElement(options.insertAt.before, target);\\n\\t\\ttarget.insertBefore(style, nextSibling);\\n\\t} else {\\n\\t\\tthrow new Error(\\\"[Style Loader]\\\\n\\\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\\\n Must be 'top', 'bottom', or Object.\\\\n (https://github.com/webpack-contrib/style-loader#insertat)\\\\n\\\");\\n\\t}\\n}\\n\\nfunction removeStyleElement (style) {\\n\\tif (style.parentNode === null) return false;\\n\\tstyle.parentNode.removeChild(style);\\n\\n\\tvar idx = stylesInsertedAtTop.indexOf(style);\\n\\tif(idx >= 0) {\\n\\t\\tstylesInsertedAtTop.splice(idx, 1);\\n\\t}\\n}\\n\\nfunction createStyleElement (options) {\\n\\tvar style = document.createElement(\\\"style\\\");\\n\\n\\tif(options.attrs.type === undefined) {\\n\\t\\toptions.attrs.type = \\\"text/css\\\";\\n\\t}\\n\\n\\tif(options.attrs.nonce === undefined) {\\n\\t\\tvar nonce = getNonce();\\n\\t\\tif (nonce) {\\n\\t\\t\\toptions.attrs.nonce = nonce;\\n\\t\\t}\\n\\t}\\n\\n\\taddAttrs(style, options.attrs);\\n\\tinsertStyleElement(options, style);\\n\\n\\treturn style;\\n}\\n\\nfunction createLinkElement (options) {\\n\\tvar link = document.createElement(\\\"link\\\");\\n\\n\\tif(options.attrs.type === undefined) {\\n\\t\\toptions.attrs.type = \\\"text/css\\\";\\n\\t}\\n\\toptions.attrs.rel = \\\"stylesheet\\\";\\n\\n\\taddAttrs(link, options.attrs);\\n\\tinsertStyleElement(options, link);\\n\\n\\treturn link;\\n}\\n\\nfunction addAttrs (el, attrs) {\\n\\tObject.keys(attrs).forEach(function (key) {\\n\\t\\tel.setAttribute(key, attrs[key]);\\n\\t});\\n}\\n\\nfunction getNonce() {\\n\\tif (false) {}\\n\\n\\treturn __webpack_require__.nc;\\n}\\n\\nfunction addStyle (obj, options) {\\n\\tvar style, update, remove, result;\\n\\n\\t// If a transform function was defined, run it on the css\\n\\tif (options.transform && obj.css) {\\n\\t    result = typeof options.transform === 'function'\\n\\t\\t ? options.transform(obj.css) \\n\\t\\t : options.transform.default(obj.css);\\n\\n\\t    if (result) {\\n\\t    \\t// If transform returns a value, use that instead of the original css.\\n\\t    \\t// This allows running runtime transformations on the css.\\n\\t    \\tobj.css = result;\\n\\t    } else {\\n\\t    \\t// If the transform function returns a falsy value, don't add this css.\\n\\t    \\t// This allows conditional loading of css\\n\\t    \\treturn function() {\\n\\t    \\t\\t// noop\\n\\t    \\t};\\n\\t    }\\n\\t}\\n\\n\\tif (options.singleton) {\\n\\t\\tvar styleIndex = singletonCounter++;\\n\\n\\t\\tstyle = singleton || (singleton = createStyleElement(options));\\n\\n\\t\\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\\n\\t\\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\\n\\n\\t} else if (\\n\\t\\tobj.sourceMap &&\\n\\t\\ttypeof URL === \\\"function\\\" &&\\n\\t\\ttypeof URL.createObjectURL === \\\"function\\\" &&\\n\\t\\ttypeof URL.revokeObjectURL === \\\"function\\\" &&\\n\\t\\ttypeof Blob === \\\"function\\\" &&\\n\\t\\ttypeof btoa === \\\"function\\\"\\n\\t) {\\n\\t\\tstyle = createLinkElement(options);\\n\\t\\tupdate = updateLink.bind(null, style, options);\\n\\t\\tremove = function () {\\n\\t\\t\\tremoveStyleElement(style);\\n\\n\\t\\t\\tif(style.href) URL.revokeObjectURL(style.href);\\n\\t\\t};\\n\\t} else {\\n\\t\\tstyle = createStyleElement(options);\\n\\t\\tupdate = applyToTag.bind(null, style);\\n\\t\\tremove = function () {\\n\\t\\t\\tremoveStyleElement(style);\\n\\t\\t};\\n\\t}\\n\\n\\tupdate(obj);\\n\\n\\treturn function updateStyle (newObj) {\\n\\t\\tif (newObj) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tnewObj.css === obj.css &&\\n\\t\\t\\t\\tnewObj.media === obj.media &&\\n\\t\\t\\t\\tnewObj.sourceMap === obj.sourceMap\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tupdate(obj = newObj);\\n\\t\\t} else {\\n\\t\\t\\tremove();\\n\\t\\t}\\n\\t};\\n}\\n\\nvar replaceText = (function () {\\n\\tvar textStore = [];\\n\\n\\treturn function (index, replacement) {\\n\\t\\ttextStore[index] = replacement;\\n\\n\\t\\treturn textStore.filter(Boolean).join('\\\\n');\\n\\t};\\n})();\\n\\nfunction applyToSingletonTag (style, index, remove, obj) {\\n\\tvar css = remove ? \\\"\\\" : obj.css;\\n\\n\\tif (style.styleSheet) {\\n\\t\\tstyle.styleSheet.cssText = replaceText(index, css);\\n\\t} else {\\n\\t\\tvar cssNode = document.createTextNode(css);\\n\\t\\tvar childNodes = style.childNodes;\\n\\n\\t\\tif (childNodes[index]) style.removeChild(childNodes[index]);\\n\\n\\t\\tif (childNodes.length) {\\n\\t\\t\\tstyle.insertBefore(cssNode, childNodes[index]);\\n\\t\\t} else {\\n\\t\\t\\tstyle.appendChild(cssNode);\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction applyToTag (style, obj) {\\n\\tvar css = obj.css;\\n\\tvar media = obj.media;\\n\\n\\tif(media) {\\n\\t\\tstyle.setAttribute(\\\"media\\\", media)\\n\\t}\\n\\n\\tif(style.styleSheet) {\\n\\t\\tstyle.styleSheet.cssText = css;\\n\\t} else {\\n\\t\\twhile(style.firstChild) {\\n\\t\\t\\tstyle.removeChild(style.firstChild);\\n\\t\\t}\\n\\n\\t\\tstyle.appendChild(document.createTextNode(css));\\n\\t}\\n}\\n\\nfunction updateLink (link, options, obj) {\\n\\tvar css = obj.css;\\n\\tvar sourceMap = obj.sourceMap;\\n\\n\\t/*\\n\\t\\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\\n\\t\\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\\n\\t\\ton by default.  Otherwise default to the convertToAbsoluteUrls option\\n\\t\\tdirectly\\n\\t*/\\n\\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\\n\\n\\tif (options.convertToAbsoluteUrls || autoFixUrls) {\\n\\t\\tcss = fixUrls(css);\\n\\t}\\n\\n\\tif (sourceMap) {\\n\\t\\t// http://stackoverflow.com/a/26603875\\n\\t\\tcss += \\\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \\\" */\\\";\\n\\t}\\n\\n\\tvar blob = new Blob([css], { type: \\\"text/css\\\" });\\n\\n\\tvar oldSrc = link.href;\\n\\n\\tlink.href = URL.createObjectURL(blob);\\n\\n\\tif(oldSrc) URL.revokeObjectURL(oldSrc);\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/style-loader/lib/addStyles.js\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/style-loader/lib/urls.js\":\n/*!***********************************************!*\\\n  !*** ./node_modules/style-loader/lib/urls.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"\\n/**\\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\\n * embed the css on the page. This breaks all relative urls because now they are relative to a\\n * bundle instead of the current page.\\n *\\n * One solution is to only use full urls, but that may be impossible.\\n *\\n * Instead, this function \\\"fixes\\\" the relative urls to be absolute according to the current page location.\\n *\\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\\n *\\n */\\n\\nmodule.exports = function (css) {\\n  // get current location\\n  var location = typeof window !== \\\"undefined\\\" && window.location;\\n\\n  if (!location) {\\n    throw new Error(\\\"fixUrls requires window.location\\\");\\n  }\\n\\n\\t// blank or null?\\n\\tif (!css || typeof css !== \\\"string\\\") {\\n\\t  return css;\\n  }\\n\\n  var baseUrl = location.protocol + \\\"//\\\" + location.host;\\n  var currentDir = baseUrl + location.pathname.replace(/\\\\/[^\\\\/]*$/, \\\"/\\\");\\n\\n\\t// convert each url(...)\\n\\t/*\\n\\tThis regular expression is just a way to recursively match brackets within\\n\\ta string.\\n\\n\\t /url\\\\s*\\\\(  = Match on the word \\\"url\\\" with any whitespace after it and then a parens\\n\\t   (  = Start a capturing group\\n\\t     (?:  = Start a non-capturing group\\n\\t         [^)(]  = Match anything that isn't a parentheses\\n\\t         |  = OR\\n\\t         \\\\(  = Match a start parentheses\\n\\t             (?:  = Start another non-capturing groups\\n\\t                 [^)(]+  = Match anything that isn't a parentheses\\n\\t                 |  = OR\\n\\t                 \\\\(  = Match a start parentheses\\n\\t                     [^)(]*  = Match anything that isn't a parentheses\\n\\t                 \\\\)  = Match a end parentheses\\n\\t             )  = End Group\\n              *\\\\) = Match anything and then a close parens\\n          )  = Close non-capturing group\\n          *  = Match anything\\n       )  = Close capturing group\\n\\t \\\\)  = Match a close parens\\n\\n\\t /gi  = Get all matches, not the first.  Be case insensitive.\\n\\t */\\n\\tvar fixedCss = css.replace(/url\\\\s*\\\\(((?:[^)(]|\\\\((?:[^)(]+|\\\\([^)(]*\\\\))*\\\\))*)\\\\)/gi, function(fullMatch, origUrl) {\\n\\t\\t// strip quotes (if they exist)\\n\\t\\tvar unquotedOrigUrl = origUrl\\n\\t\\t\\t.trim()\\n\\t\\t\\t.replace(/^\\\"(.*)\\\"$/, function(o, $1){ return $1; })\\n\\t\\t\\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\\n\\n\\t\\t// already a full url? no change\\n\\t\\tif (/^(#|data:|http:\\\\/\\\\/|https:\\\\/\\\\/|file:\\\\/\\\\/\\\\/|\\\\s*$)/i.test(unquotedOrigUrl)) {\\n\\t\\t  return fullMatch;\\n\\t\\t}\\n\\n\\t\\t// convert the url to a full url\\n\\t\\tvar newUrl;\\n\\n\\t\\tif (unquotedOrigUrl.indexOf(\\\"//\\\") === 0) {\\n\\t\\t  \\t//TODO: should we add protocol?\\n\\t\\t\\tnewUrl = unquotedOrigUrl;\\n\\t\\t} else if (unquotedOrigUrl.indexOf(\\\"/\\\") === 0) {\\n\\t\\t\\t// path should be relative to the base url\\n\\t\\t\\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\\n\\t\\t} else {\\n\\t\\t\\t// path should be relative to current directory\\n\\t\\t\\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\\\.\\\\//, \\\"\\\"); // Strip leading './'\\n\\t\\t}\\n\\n\\t\\t// send back the fixed url(...)\\n\\t\\treturn \\\"url(\\\" + JSON.stringify(newUrl) + \\\")\\\";\\n\\t});\\n\\n\\t// send back the fixed css\\n\\treturn fixedCss;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcz9mNmQzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/style-loader/lib/urls.js\\n\");\n\n/***/ }),\n\n/***/ \"./src/assets/icon-back.jsx\":\n/*!**********************************!*\\\n  !*** ./src/assets/icon-back.jsx ***!\n  \\**********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ \\\"./node_modules/classnames/index.js\\\");\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \\\"prop-types\\\");\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\\n\\n\\n\\n\\nvar IconBack = function IconBack(_ref) {\\n  var className = _ref.className;\\n  return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(\\\"svg\\\", {\\n    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('inline-icon', className),\\n    width: \\\"16\\\",\\n    height: \\\"16\\\",\\n    viewBox: \\\"0 0 16 16\\\"\\n  }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(\\\"g\\\", {\\n    fill: \\\"none\\\",\\n    fillRule: \\\"evenodd\\\"\\n  }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(\\\"path\\\", {\\n    className: \\\"color1-stroke\\\",\\n    stroke: \\\"#979797\\\",\\n    strokeLinecap: \\\"round\\\",\\n    strokeLinejoin: \\\"round\\\",\\n    strokeWidth: \\\"2\\\",\\n    d: \\\"M8 1L1 8l7 7M1 8h14\\\"\\n  }), react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(\\\"path\\\", {\\n    className: \\\"color1-fill\\\",\\n    fill: \\\"#7F8397\\\",\\n    fillRule: \\\"nonzero\\\",\\n    d: \\\"M3.414 7H15a1 1 0 0 1 0 2H3.414l5.293 5.293a1 1 0 0 1-1.414 1.414l-7-7a1 1 0 0 1 0-1.414l7-7a1 1 0 1 1 1.414 1.414L3.414 7z\\\"\\n  })));\\n};\\n\\nIconBack.propTypes = {\\n  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string\\n};\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (IconBack);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL2ljb24tYmFjay5qc3guanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvLi9zcmMvYXNzZXRzL2ljb24tYmFjay5qc3g/NTA3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0ICAgICAgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBJY29uQmFjayA9ICh7IGNsYXNzTmFtZSB9KSA9PiAoXG4gICAgPHN2ZyBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2lubGluZS1pY29uJywgY2xhc3NOYW1lKX0gd2lkdGg9JzE2JyBoZWlnaHQ9JzE2JyB2aWV3Qm94PScwIDAgMTYgMTYnPlxuICAgICAgICA8ZyBmaWxsPSdub25lJyBmaWxsUnVsZT0nZXZlbm9kZCc+XG4gICAgICAgICAgICA8cGF0aCBjbGFzc05hbWU9J2NvbG9yMS1zdHJva2UnIHN0cm9rZT0nIzk3OTc5Nycgc3Ryb2tlTGluZWNhcD0ncm91bmQnIHN0cm9rZUxpbmVqb2luPSdyb3VuZCcgc3Ryb2tlV2lkdGg9JzInIGQ9J004IDFMMSA4bDcgN00xIDhoMTQnIC8+XG4gICAgICAgICAgICA8cGF0aCBjbGFzc05hbWU9J2NvbG9yMS1maWxsJyBmaWxsPScjN0Y4Mzk3JyBmaWxsUnVsZT0nbm9uemVybycgZD0nTTMuNDE0IDdIMTVhMSAxIDAgMCAxIDAgMkgzLjQxNGw1LjI5MyA1LjI5M2ExIDEgMCAwIDEtMS40MTQgMS40MTRsLTctN2ExIDEgMCAwIDEgMC0xLjQxNGw3LTdhMSAxIDAgMSAxIDEuNDE0IDEuNDE0TDMuNDE0IDd6JyAvPlxuICAgICAgICA8L2c+XG4gICAgPC9zdmc+XG4pO1xuXG5JY29uQmFjay5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSWNvbkJhY2s7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSkE7QUFDQTtBQVFBO0FBQ0E7QUFEQTtBQUlBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/assets/icon-back.jsx\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/ads/ads.jsx\":\n/*!************************************!*\\\n  !*** ./src/components/ads/ads.jsx ***!\n  \\************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deriv-components/lib/button */ \\\"deriv-components/lib/button\\\");\\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-components/lib/button.css */ \\\"deriv-components/lib/button.css\\\");\\n/* harmony import */ var deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var deriv_components_lib_button_toggle_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! deriv-components/lib/button-toggle-menu */ \\\"deriv-components/lib/button-toggle-menu\\\");\\n/* harmony import */ var deriv_components_lib_button_toggle_menu__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button_toggle_menu__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var deriv_components_lib_button_toggle_menu_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! deriv-components/lib/button-toggle-menu.css */ \\\"deriv-components/lib/button-toggle-menu.css\\\");\\n/* harmony import */ var deriv_components_lib_button_toggle_menu_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button_toggle_menu_css__WEBPACK_IMPORTED_MODULE_4__);\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! deriv-translations */ \\\"deriv-translations\\\");\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(deriv_translations__WEBPACK_IMPORTED_MODULE_5__);\\n/* harmony import */ var _ads_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ads.scss */ \\\"./src/components/ads/ads.scss\\\");\\n/* harmony import */ var _ads_scss__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_ads_scss__WEBPACK_IMPORTED_MODULE_6__);\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n        \\n\\n\\n\\n        \\n // import { WS } from '../../utils/websocket';\\n\\n\\nvar ads_filters = [{\\n  text: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_5__[\\\"localize\\\"])('Buy'),\\n  value: 'buy'\\n}, {\\n  text: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_5__[\\\"localize\\\"])('Sell'),\\n  value: 'sell'\\n}];\\n\\nvar Ads =\\n/*#__PURE__*/\\nfunction (_Component) {\\n  _inherits(Ads, _Component);\\n\\n  function Ads() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, Ads);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Ads)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.state = {\\n      ads_list: [],\\n      filter_value: 'buy'\\n    };\\n    return _this;\\n  }\\n\\n  _createClass(Ads, [{\\n    key: \\\"onChange\\\",\\n    value: function onChange(event) {\\n      this.setState({\\n        filter_value: event.target.value\\n      });\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      var filter_value = this.state.filter_value;\\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        className: \\\"ads\\\"\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        className: \\\"ads__header\\\"\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_button_toggle_menu__WEBPACK_IMPORTED_MODULE_3___default.a, {\\n        buttons_arr: ads_filters,\\n        className: \\\"ads__header__filters\\\",\\n        is_animated: true,\\n        name: \\\"filter\\\",\\n        onChange: function onChange(event) {\\n          _this2.onChange(event);\\n        },\\n        value: filter_value\\n      })));\\n    }\\n  }]);\\n\\n  return Ads;\\n}(react__WEBPACK_IMPORTED_MODULE_0__[\\\"Component\\\"]);\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (Ads);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hZHMvYWRzLmpzeC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC8uL3NyYy9jb21wb25lbnRzL2Fkcy9hZHMuanN4PzRlZWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9ICAgICAgICAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uLCBCdXR0b25Ub2dnbGVNZW51IH0gZnJvbSAnZGVyaXYtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBsb2NhbGl6ZSB9ICAgICAgICAgICAgICAgICBmcm9tICdkZXJpdi10cmFuc2xhdGlvbnMnO1xuLy8gaW1wb3J0IHsgV1MgfSBmcm9tICcuLi8uLi91dGlscy93ZWJzb2NrZXQnO1xuaW1wb3J0ICcuL2Fkcy5zY3NzJztcblxuY29uc3QgYWRzX2ZpbHRlcnMgPSBbXG4gICAge1xuICAgICAgICB0ZXh0IDogbG9jYWxpemUoJ0J1eScpLFxuICAgICAgICB2YWx1ZTogJ2J1eScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHRleHQgOiBsb2NhbGl6ZSgnU2VsbCcpLFxuICAgICAgICB2YWx1ZTogJ3NlbGwnLFxuICAgIH0sXG5dO1xuY2xhc3MgQWRzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgYWRzX2xpc3QgICAgOiBbXSxcbiAgICAgICAgZmlsdGVyX3ZhbHVlOiAnYnV5JyxcbiAgICB9XG5cbiAgICBvbkNoYW5nZSAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBmaWx0ZXJfdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGZpbHRlcl92YWx1ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhZHMnPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhZHNfX2hlYWRlcic+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25Ub2dnbGVNZW51XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zX2Fycj17YWRzX2ZpbHRlcnN9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2Fkc19faGVhZGVyX19maWx0ZXJzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNfYW5pbWF0ZWQ9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSdmaWx0ZXInXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7IHRoaXMub25DaGFuZ2UoZXZlbnQpOyB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2ZpbHRlcl92YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFGQTs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFGQTs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7O0FBRUE7QUFBQTs7QUFBQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBTkE7QUFXQTs7OztBQTVCQTs7QUErQkE7Ozs7Ozs7QSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/components/ads/ads.jsx\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/ads/ads.scss\":\n/*!*************************************!*\\\n  !*** ./src/components/ads/ads.scss ***!\n  \\*************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\nvar content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./ads.scss */ \\\"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/ads/ads.scss\\\");\\n\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n\\nvar transform;\\nvar insertInto;\\n\\n\\n\\nvar options = {\\\"hmr\\\":true}\\n\\noptions.transform = transform\\noptions.insertInto = undefined;\\n\\nvar update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ \\\"./node_modules/style-loader/lib/addStyles.js\\\")(content, options);\\n\\nif(content.locals) module.exports = content.locals;\\n\\nif(false) {}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hZHMvYWRzLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvLi9zcmMvY29tcG9uZW50cy9hZHMvYWRzLnNjc3M/MDYyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS03LTMhLi9hZHMuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS03LTMhLi9hZHMuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1yZXNvdXJjZXMtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tNy0zIS4vYWRzLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/components/ads/ads.scss\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/app.jsx\":\n/*!********************************!*\\\n  !*** ./src/components/app.jsx ***!\n  \\********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \\\"prop-types\\\");\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var deriv_components_lib_tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-components/lib/tabs */ \\\"deriv-components/lib/tabs\\\");\\n/* harmony import */ var deriv_components_lib_tabs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_tabs__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var deriv_components_lib_tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! deriv-components/lib/tabs.css */ \\\"deriv-components/lib/tabs.css\\\");\\n/* harmony import */ var deriv_components_lib_tabs_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_tabs_css__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! deriv-translations */ \\\"deriv-translations\\\");\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(deriv_translations__WEBPACK_IMPORTED_MODULE_4__);\\n/* harmony import */ var _ads_ads_jsx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ads/ads.jsx */ \\\"./src/components/ads/ads.jsx\\\");\\n/* harmony import */ var _orders_orders_jsx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./orders/orders.jsx */ \\\"./src/components/orders/orders.jsx\\\");\\n/* harmony import */ var _my_ads_my_ads_jsx__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./my-ads/my-ads.jsx */ \\\"./src/components/my-ads/my-ads.jsx\\\");\\n/* harmony import */ var _my_profile_my_profile_jsx__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./my-profile/my-profile.jsx */ \\\"./src/components/my-profile/my-profile.jsx\\\");\\n/* harmony import */ var _utils_websocket__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/websocket */ \\\"./src/utils/websocket.js\\\");\\n/* harmony import */ var _app_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./app.scss */ \\\"./src/components/app.scss\\\");\\n/* harmony import */ var _app_scss__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_app_scss__WEBPACK_IMPORTED_MODULE_10__);\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n        \\n\\n\\n\\n\\n\\n\\n\\n\\nvar App =\\n/*#__PURE__*/\\nfunction (_Component) {\\n  _inherits(App, _Component);\\n\\n  function App(props) {\\n    var _this;\\n\\n    _classCallCheck(this, App);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\\n    Object(_utils_websocket__WEBPACK_IMPORTED_MODULE_9__[\\\"init\\\"])(_this.props.websocket_api);\\n    _this.state = {\\n      activeIndex: 0\\n    };\\n    return _this;\\n  }\\n\\n  _createClass(App, [{\\n    key: \\\"componentDidMount\\\",\\n    value: function componentDidMount() {\\n      // TODO: [fix-index-set] Fix issues with unresolved index to set in tabs\\n      var index_to_set = /orders/.test(window.location.pathname) ? 1 : 0;\\n\\n      if (this.state.active_index !== index_to_set) {\\n        this.setState({\\n          active_index: index_to_set\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var active_index = this.state.active_index;\\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__[\\\"Fragment\\\"], null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"main\\\", {\\n        className: \\\"deriv-p2p\\\"\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"nav\\\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_tabs__WEBPACK_IMPORTED_MODULE_2___default.a, {\\n        active_index: active_index\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_4__[\\\"localize\\\"])('Buy/sell')\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_ads_ads_jsx__WEBPACK_IMPORTED_MODULE_5__[\\\"default\\\"], null)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_4__[\\\"localize\\\"])('Orders')\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_orders_orders_jsx__WEBPACK_IMPORTED_MODULE_6__[\\\"default\\\"], null)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_4__[\\\"localize\\\"])('My ads')\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_my_ads_my_ads_jsx__WEBPACK_IMPORTED_MODULE_7__[\\\"default\\\"], null)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_4__[\\\"localize\\\"])('My profile')\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_my_profile_my_profile_jsx__WEBPACK_IMPORTED_MODULE_8__[\\\"default\\\"], null))))));\\n    }\\n  }]);\\n\\n  return App;\\n}(react__WEBPACK_IMPORTED_MODULE_0__[\\\"Component\\\"]);\\n\\nApp.propTypes = {\\n  websocket_api: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object\\n};\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (App);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hcHAuanN4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwLy4vc3JjL2NvbXBvbmVudHMvYXBwLmpzeD9hNGJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCwgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRhYnMgfSBmcm9tICdkZXJpdi1jb21wb25lbnRzJztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnZGVyaXYtdHJhbnNsYXRpb25zJztcbmltcG9ydCBBZHMgZnJvbSAnLi9hZHMvYWRzLmpzeCc7XG5pbXBvcnQgT3JkZXJzIGZyb20gJy4vb3JkZXJzL29yZGVycy5qc3gnO1xuaW1wb3J0IE15QWRzIGZyb20gJy4vbXktYWRzL215LWFkcy5qc3gnO1xuaW1wb3J0IE15UHJvZmlsZSBmcm9tICcuL215LXByb2ZpbGUvbXktcHJvZmlsZS5qc3gnO1xuaW1wb3J0IHsgaW5pdCB9IGZyb20gJy4uL3V0aWxzL3dlYnNvY2tldCc7XG5pbXBvcnQgJy4vYXBwLnNjc3MnO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIGluaXQodGhpcy5wcm9wcy53ZWJzb2NrZXRfYXBpKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIC8vIFRPRE86IFtmaXgtaW5kZXgtc2V0XSBGaXggaXNzdWVzIHdpdGggdW5yZXNvbHZlZCBpbmRleCB0byBzZXQgaW4gdGFic1xuICAgICAgICBjb25zdCBpbmRleF90b19zZXQgPSAvb3JkZXJzLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSkgPyAxIDogMDtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmVfaW5kZXggIT09IGluZGV4X3RvX3NldCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZV9pbmRleDogaW5kZXhfdG9fc2V0IH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGFjdGl2ZV9pbmRleCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgICAgIHsvKlxuICAgICAgICAgICAgICAgICAgICBBcHAgY2FuIG92ZXJ3cml0ZSB0aGUgc3R5bGVzIGJ5IHBhc3NpbmcgY3NzIHZhcmlhYmxlcyB0byBjbGFzc05hbWUgZGVyaXYtYXBpXG4gICAgICAgICAgICAgICAgICAgIHlvdSBjYW4gcmVmZXIgdG8gZGVyaXYtc2hhcmVkL3RoZW1lcyBmb3IgdGhlIGNzcyB2YXJpYWJsZXMgdGhhdCBhcmUgdXNlZCBpbiBkZXJpdi1hcHAgYXMgd2VsbCBhcyBwMnBcbiAgICAgICAgICAgICAgICAqL31cbiAgICAgICAgICAgICAgICA8bWFpbiBjbGFzc05hbWU9J2Rlcml2LXAycCc+XG4gICAgICAgICAgICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFicyBhY3RpdmVfaW5kZXg9e2FjdGl2ZV9pbmRleH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBsYWJlbD17bG9jYWxpemUoJ0J1eS9zZWxsJyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWRzIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBsYWJlbD17bG9jYWxpemUoJ09yZGVycycpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE9yZGVycyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgbGFiZWw9e2xvY2FsaXplKCdNeSBhZHMnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNeUFkcyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgbGFiZWw9e2xvY2FsaXplKCdNeSBwcm9maWxlJyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TXlQcm9maWxlIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYnM+XG4gICAgICAgICAgICAgICAgICAgIDwvbmF2PlxuICAgICAgICAgICAgICAgIDwvbWFpbj5cbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5BcHAucHJvcFR5cGVzID0ge1xuICAgIHdlYnNvY2tldF9hcGk6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7OztBQUVBO0FBQUE7QUFDQTtBQURBOztBQUNBO0FBRUE7QUFFQTtBQUNBO0FBREE7QUFMQTtBQVFBOzs7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUdBO0FBTUE7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBR0E7QUFBQTtBQUdBO0FBQUE7QUFHQTtBQUFBO0FBUUE7Ozs7QUFsREE7QUFDQTtBQW9EQTtBQUNBO0FBREE7QUFJQTs7O0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/components/app.jsx\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/app.scss\":\n/*!*********************************!*\\\n  !*** ./src/components/app.scss ***!\n  \\*********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\nvar content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!../../node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./app.scss */ \\\"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/app.scss\\\");\\n\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n\\nvar transform;\\nvar insertInto;\\n\\n\\n\\nvar options = {\\\"hmr\\\":true}\\n\\noptions.transform = transform\\noptions.insertInto = undefined;\\n\\nvar update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ \\\"./node_modules/style-loader/lib/addStyles.js\\\")(content, options);\\n\\nif(content.locals) module.exports = content.locals;\\n\\nif(false) {}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hcHAuc2Nzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC8uL3NyYy9jb21wb25lbnRzL2FwcC5zY3NzPzE0N2YiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1yZXNvdXJjZXMtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tNy0zIS4vYXBwLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1yZXNvdXJjZXMtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tNy0zIS4vYXBwLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtcmVzb3VyY2VzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTctMyEuL2FwcC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/components/app.scss\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/my-ads/form-ads.jsx\":\n/*!********************************************!*\\\n  !*** ./src/components/my-ads/form-ads.jsx ***!\n  \\********************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \\\"prop-types\\\");\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-translations */ \\\"deriv-translations\\\");\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_translations__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var formik__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! formik */ \\\"formik\\\");\\n/* harmony import */ var formik__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(formik__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! deriv-components/lib/autocomplete */ \\\"deriv-components/lib/autocomplete\\\");\\n/* harmony import */ var deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_4__);\\n/* harmony import */ var deriv_components_lib_autocomplete_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! deriv-components/lib/autocomplete.css */ \\\"deriv-components/lib/autocomplete.css\\\");\\n/* harmony import */ var deriv_components_lib_autocomplete_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_autocomplete_css__WEBPACK_IMPORTED_MODULE_5__);\\n/* harmony import */ var deriv_components_lib_dropdown__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! deriv-components/lib/dropdown */ \\\"deriv-components/lib/dropdown\\\");\\n/* harmony import */ var deriv_components_lib_dropdown__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_dropdown__WEBPACK_IMPORTED_MODULE_6__);\\n/* harmony import */ var deriv_components_lib_dropdown_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! deriv-components/lib/dropdown.css */ \\\"deriv-components/lib/dropdown.css\\\");\\n/* harmony import */ var deriv_components_lib_dropdown_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_dropdown_css__WEBPACK_IMPORTED_MODULE_7__);\\n/* harmony import */ var deriv_components_lib_loading__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! deriv-components/lib/loading */ \\\"deriv-components/lib/loading\\\");\\n/* harmony import */ var deriv_components_lib_loading__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_loading__WEBPACK_IMPORTED_MODULE_8__);\\n/* harmony import */ var deriv_components_lib_loading_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! deriv-components/lib/loading.css */ \\\"deriv-components/lib/loading.css\\\");\\n/* harmony import */ var deriv_components_lib_loading_css__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_loading_css__WEBPACK_IMPORTED_MODULE_9__);\\n/* harmony import */ var deriv_components_lib_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! deriv-components/lib/input */ \\\"deriv-components/lib/input\\\");\\n/* harmony import */ var deriv_components_lib_input__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_input__WEBPACK_IMPORTED_MODULE_10__);\\n/* harmony import */ var deriv_components_lib_input_css__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! deriv-components/lib/input.css */ \\\"deriv-components/lib/input.css\\\");\\n/* harmony import */ var deriv_components_lib_input_css__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_input_css__WEBPACK_IMPORTED_MODULE_11__);\\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! deriv-components/lib/button */ \\\"deriv-components/lib/button\\\");\\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_12__);\\n/* harmony import */ var deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! deriv-components/lib/button.css */ \\\"deriv-components/lib/button.css\\\");\\n/* harmony import */ var deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_13__);\\n/* harmony import */ var deriv_components_lib_themed_scrollbars__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! deriv-components/lib/themed-scrollbars */ \\\"deriv-components/lib/themed-scrollbars\\\");\\n/* harmony import */ var deriv_components_lib_themed_scrollbars__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_themed_scrollbars__WEBPACK_IMPORTED_MODULE_14__);\\n/* harmony import */ var deriv_components_lib_themed_scrollbars_css__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! deriv-components/lib/themed-scrollbars.css */ \\\"deriv-components/lib/themed-scrollbars.css\\\");\\n/* harmony import */ var deriv_components_lib_themed_scrollbars_css__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_themed_scrollbars_css__WEBPACK_IMPORTED_MODULE_15__);\\n/* harmony import */ var _utils_websocket__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../utils/websocket */ \\\"./src/utils/websocket.js\\\");\\n/* harmony import */ var _assets_icon_back_jsx__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../assets/icon-back.jsx */ \\\"./src/assets/icon-back.jsx\\\");\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance\\\"); }\\n\\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \\\"[object Arguments]\\\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n\\n        \\n\\n\\n\\n        \\n\\n\\n\\n        \\n\\n\\n\\n        \\n\\n\\n\\n        \\n\\n\\n\\n        \\n\\n\\n\\nvar FormAds =\\n/*#__PURE__*/\\nfunction (_Component) {\\n  _inherits(FormAds, _Component);\\n\\n  function FormAds() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, FormAds);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FormAds)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.state = {\\n      initial_values: {\\n        country: '',\\n        currency: '',\\n        type: '',\\n        asset: '',\\n        fix_price: '',\\n        amount: '',\\n        min_transaction: '',\\n        max_transaction: '',\\n        advertiser_note: ''\\n      },\\n      is_loading: true\\n    };\\n\\n    _this.validateFormAds = function (values) {\\n      var available_price = 0.8; // later get available amount from the api\\n\\n      var validations = {\\n        type: [function (v) {\\n          return !!v;\\n        }],\\n        asset: [function (v) {\\n          return !!v;\\n        }],\\n        fix_price: [function (v) {\\n          return !!v;\\n        }],\\n        amount: [function (v) {\\n          return !!v;\\n        }, function (v) {\\n          return v > available_price;\\n        }],\\n        min_transaction: [function (v) {\\n          return !!v;\\n        }],\\n        payment_method: [function (v) {\\n          return !!v;\\n        }],\\n        advertiser_note: [function (v) {\\n          return !!v;\\n        }, function (v) {\\n          return v.length < 400;\\n        }]\\n      };\\n      var mappedKey = {\\n        type: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Type'),\\n        asset: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Asset'),\\n        fix_price: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Fixed price'),\\n        amount: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Amount'),\\n        min_transaction: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Min. transaction'),\\n        advertiser_note: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Advertiser note')\\n      }; // TODO: [translation] text wont pass in the translation script\\n\\n      var common_messages = ['{{field_name}} is required'];\\n      var amount_messages = ['{{field_name}} is required', '{{field_name}} is too low'];\\n      var note_messages = ['{{field_name}} is required', '{{field_name}} has exceed maximum length'];\\n      var errors = {};\\n      Object.entries(validations).forEach(function (_ref) {\\n        var _ref2 = _slicedToArray(_ref, 2),\\n            key = _ref2[0],\\n            rules = _ref2[1];\\n\\n        var error_index = rules.findIndex(function (v) {\\n          return !v(values[key]);\\n        });\\n\\n        if (error_index !== -1) {\\n          switch (key) {\\n            case 'amount':\\n              errors[key] = errors[key] = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"Localize\\\"], {\\n                i18n_default_text: amount_messages[error_index],\\n                values: {\\n                  field_name: mappedKey[key]\\n                }\\n              });\\n              break;\\n\\n            case 'advertiser_note':\\n              errors[key] = errors[key] = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"Localize\\\"], {\\n                i18n_default_text: note_messages[error_index],\\n                values: {\\n                  field_name: mappedKey[key]\\n                }\\n              });\\n              break;\\n\\n            default:\\n              errors[key] = errors[key] = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"Localize\\\"], {\\n                i18n_default_text: common_messages[error_index],\\n                values: {\\n                  field_name: mappedKey[key]\\n                }\\n              });\\n          }\\n        }\\n      });\\n      return errors;\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(FormAds, [{\\n    key: \\\"componentDidMount\\\",\\n    value: function componentDidMount() {\\n      var _this2 = this;\\n\\n      // TODO: call api to populate country, currency, and asset\\n      Object(_utils_websocket__WEBPACK_IMPORTED_MODULE_16__[\\\"WS\\\"])().send({\\n        'residence_list': 1\\n      }).then(function () {\\n        // this is just to mock the api delay response\\n        var new_initial_values = {\\n          country: 'Indonesia',\\n          currency: 'IDR',\\n          type: 'buy',\\n          asset: 'USD',\\n          fix_price: 10000,\\n          amount: 50,\\n          min_transaction: 1000\\n        };\\n\\n        _this2.setState({\\n          initial_values: new_initial_values\\n        });\\n\\n        if (_this2.props.ad_id) {// call the api, get the file based on id\\n          // populate the state from the respnose\\n        } else {\\n          _this2.setState({\\n            is_loading: false\\n          });\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"handleSubmit\\\",\\n    value: function handleSubmit(formik_vars) {\\n      // TODO: p2p API call to create ad\\n      // eslint-disable-next-line no-console\\n      console.log(this.state); // eslint-disable-next-line no-console\\n\\n      console.log(formik_vars);\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _this3 = this;\\n\\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__[\\\"Fragment\\\"], null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        className: \\\"my-ads__heading-wrapper\\\"\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        onClick: function onClick() {\\n          return _this3.props.handleShowForm(false);\\n        },\\n        className: \\\"my-ads__heading-btn\\\"\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_assets_icon_back_jsx__WEBPACK_IMPORTED_MODULE_17__[\\\"default\\\"], null)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"h2\\\", null, Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Create new ad'))), this.state.is_loading ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_loading__WEBPACK_IMPORTED_MODULE_8___default.a, {\\n        is_fullscreen: false\\n      }) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Formik\\\"], {\\n        initialValues: _objectSpread({}, this.state.initial_values),\\n        onSubmit: this.handleSubmit,\\n        validate: this.validateFormAds\\n      }, function (_ref3) {\\n        var isSubmitting = _ref3.isSubmitting,\\n            errors = _ref3.errors,\\n            touched = _ref3.touched,\\n            isValid = _ref3.isValid,\\n            setFieldValue = _ref3.setFieldValue,\\n            values = _ref3.values;\\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n          className: \\\"my-ads__form\\\"\\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Form\\\"], {\\n          noValidate: true\\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_themed_scrollbars__WEBPACK_IMPORTED_MODULE_14___default.a, {\\n          autoHide: true,\\n          style: {\\n            height: 'calc(520px - 70px)'\\n          } // height of container minus height of modal footer container\\n\\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n          className: \\\"my-ads__form-container\\\"\\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Field\\\"], {\\n          name: \\\"country\\\"\\n        }, function (_ref4) {\\n          var field = _ref4.field;\\n          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_4___default.a, _extends({}, field, {\\n            type: \\\"text\\\",\\n            className: \\\"my-ads__form-field\\\",\\n            label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Country'),\\n            list_items: [],\\n            disabled: true,\\n            onItemSelection: function onItemSelection(_ref5) {\\n              var value = _ref5.value,\\n                  text = _ref5.text;\\n              return setFieldValue('country', value ? text : '', true);\\n            }\\n          }));\\n        }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Field\\\"], {\\n          name: \\\"currency\\\"\\n        }, function (_ref6) {\\n          var field = _ref6.field;\\n          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_4___default.a, _extends({}, field, {\\n            type: \\\"text\\\",\\n            className: \\\"my-ads__form-field\\\",\\n            label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Currency'),\\n            list_items: [],\\n            disabled: true,\\n            onItemSelection: function onItemSelection(_ref7) {\\n              var value = _ref7.value,\\n                  text = _ref7.text;\\n              return setFieldValue('currency', value ? text : '', true);\\n            }\\n          }));\\n        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n          className: \\\"my-ads__form-container\\\"\\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Field\\\"], {\\n          name: \\\"type\\\"\\n        }, function (_ref8) {\\n          var field = _ref8.field;\\n          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_dropdown__WEBPACK_IMPORTED_MODULE_6___default.a, _extends({}, field, {\\n            placeholder: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Type'),\\n            is_align_text_left: true,\\n            className: \\\"my-ads__form-field\\\",\\n            list: [{\\n              text: 'Buy',\\n              value: 'buy'\\n            }, {\\n              text: 'Sell',\\n              value: 'sell'\\n            }],\\n            error: touched.type && errors.type\\n          }));\\n        }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Field\\\"], {\\n          name: \\\"asset\\\"\\n        }, function (_ref9) {\\n          var field = _ref9.field;\\n          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_4___default.a, _extends({}, field, {\\n            type: \\\"text\\\",\\n            className: \\\"my-ads__form-field\\\",\\n            disabled: true,\\n            label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Asset'),\\n            list_items: [],\\n            required: true,\\n            onItemSelection: function onItemSelection(_ref10) {\\n              var value = _ref10.value,\\n                  text = _ref10.text;\\n              return setFieldValue('asset', value ? text : '', true);\\n            }\\n          }));\\n        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n          className: \\\"my-ads__form-container\\\"\\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Field\\\"], {\\n          name: \\\"fix_price\\\"\\n        }, function (_ref11) {\\n          var field = _ref11.field;\\n          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_input__WEBPACK_IMPORTED_MODULE_10___default.a, _extends({}, field, {\\n            \\\"data-lpignore\\\": \\\"true\\\",\\n            type: \\\"number\\\",\\n            error: touched.fix_price && errors.fix_price,\\n            label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Fixed price'),\\n            className: \\\"my-ads__form-field\\\",\\n            trailing_icon: react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"span\\\", {\\n              className: \\\"my-ads__form-field--trailing\\\"\\n            }, \\\"\\\".concat(values.currency, \\\"/\\\").concat(values.asset)),\\n            required: true\\n          }));\\n        }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Field\\\"], {\\n          name: \\\"amount\\\"\\n        }, function (_ref12) {\\n          var field = _ref12.field;\\n          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_input__WEBPACK_IMPORTED_MODULE_10___default.a, _extends({}, field, {\\n            \\\"data-lpignore\\\": \\\"true\\\",\\n            type: \\\"number\\\",\\n            error: touched.amount && errors.amount,\\n            label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Amount'),\\n            className: \\\"my-ads__form-field\\\",\\n            trailing_icon: react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"span\\\", {\\n              className: \\\"my-ads__form-field--trailing\\\"\\n            }, values.asset),\\n            required: true\\n          }));\\n        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n          className: \\\"my-ads__form--container\\\"\\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Field\\\"], {\\n          name: \\\"min_transaction\\\"\\n        }, function (_ref13) {\\n          var field = _ref13.field;\\n          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_input__WEBPACK_IMPORTED_MODULE_10___default.a, _extends({}, field, {\\n            \\\"data-lpignore\\\": \\\"true\\\",\\n            type: \\\"number\\\",\\n            error: touched.min_transaction && errors.min_transaction,\\n            label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Min. transaction'),\\n            className: \\\"my-ads__form-field my-ads__form-field--single\\\",\\n            trailing_icon: react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"span\\\", {\\n              className: \\\"my-ads__form-field--trailing\\\"\\n            }, values.currency),\\n            required: true\\n          }));\\n        }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Field\\\"], {\\n          name: \\\"max_transaction\\\"\\n        }, function (_ref14) {\\n          var field = _ref14.field;\\n          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_input__WEBPACK_IMPORTED_MODULE_10___default.a, _extends({}, field, {\\n            \\\"data-lpignore\\\": \\\"true\\\",\\n            type: \\\"number\\\",\\n            error: touched.max_transaction && errors.max_transaction,\\n            label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Max. transaction'),\\n            disabled: true,\\n            value: values.amount * values.fix_price,\\n            className: \\\"my-ads__form-field my-ads__form-field--single\\\",\\n            trailing_icon: react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"span\\\", {\\n              className: \\\"my-ads__form-field--trailing\\\"\\n            }, values.currency),\\n            required: true\\n          }));\\n        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_3__[\\\"Field\\\"], {\\n          name: \\\"advertiser_note\\\"\\n        }, function (_ref15) {\\n          var field = _ref15.field;\\n          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_input__WEBPACK_IMPORTED_MODULE_10___default.a, _extends({}, field, {\\n            \\\"data-lpignore\\\": \\\"true\\\",\\n            type: \\\"textarea\\\",\\n            error: touched.advertiser_note && errors.advertiser_note,\\n            label: Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Advertiser notes'),\\n            className: \\\"my-ads__form-field my-ads__form-field--textarea\\\",\\n            placeholder: \\\"Your contact and payment info\\\",\\n            required: true\\n          }));\\n        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n          className: \\\"my-ads__form-footer\\\"\\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_12___default.a, {\\n          secondary: true,\\n          large: true,\\n          type: \\\"reset\\\"\\n        }, Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Cancel')), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_12___default.a, {\\n          primary: true,\\n          large: true,\\n          is_disabled: isSubmitting && isValid\\n        }, Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Post ad')))));\\n      }));\\n    }\\n  }]);\\n\\n  return FormAds;\\n}(react__WEBPACK_IMPORTED_MODULE_0__[\\\"Component\\\"]);\\n\\nFormAds.propTypes = {\\n  ad_id: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  handleShowForm: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func\\n};\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (FormAds);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./src/components/my-ads/form-ads.jsx\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/my-ads/my-ads.jsx\":\n/*!******************************************!*\\\n  !*** ./src/components/my-ads/my-ads.jsx ***!\n  \\******************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deriv-translations */ \\\"deriv-translations\\\");\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(deriv_translations__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-components/lib/button */ \\\"deriv-components/lib/button\\\");\\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! deriv-components/lib/button.css */ \\\"deriv-components/lib/button.css\\\");\\n/* harmony import */ var deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var _form_ads_jsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./form-ads.jsx */ \\\"./src/components/my-ads/form-ads.jsx\\\");\\n/* harmony import */ var _toggle_ads_jsx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./toggle-ads.jsx */ \\\"./src/components/my-ads/toggle-ads.jsx\\\");\\n/* harmony import */ var _my_ads_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./my-ads.scss */ \\\"./src/components/my-ads/my-ads.scss\\\");\\n/* harmony import */ var _my_ads_scss__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_my_ads_scss__WEBPACK_IMPORTED_MODULE_6__);\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n        \\n\\n\\n\\n\\nvar MyAds =\\n/*#__PURE__*/\\nfunction (_Component) {\\n  _inherits(MyAds, _Component);\\n\\n  function MyAds() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, MyAds);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MyAds)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.state = {\\n      ad_id: '',\\n      is_enabled: false,\\n      show_form: false\\n    };\\n\\n    _this.handleShowForm = function (show_form) {\\n      _this.setState({\\n        show_form: show_form\\n      });\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(MyAds, [{\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        className: \\\"my-ads\\\"\\n      }, this.state.show_form ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_form_ads_jsx__WEBPACK_IMPORTED_MODULE_4__[\\\"default\\\"], {\\n        ad_id: this.state.ad_id,\\n        handleShowForm: this.handleShowForm\\n      }) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__[\\\"Fragment\\\"], null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        className: \\\"my-ads__header\\\"\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_toggle_ads_jsx__WEBPACK_IMPORTED_MODULE_5__[\\\"default\\\"], {\\n        is_enabled: true\\n      }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2___default.a, {\\n        primary: true,\\n        onClick: function onClick() {\\n          return _this2.handleShowForm(true);\\n        }\\n      }, Object(deriv_translations__WEBPACK_IMPORTED_MODULE_1__[\\\"localize\\\"])('Create ads')))));\\n    }\\n  }]);\\n\\n  return MyAds;\\n}(react__WEBPACK_IMPORTED_MODULE_0__[\\\"Component\\\"]);\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (MyAds);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9teS1hZHMvbXktYWRzLmpzeC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC8uL3NyYy9jb21wb25lbnRzL215LWFkcy9teS1hZHMuanN4PzE2MjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBsb2NhbGl6ZSB9ICAgICAgICAgICAgICAgICAgIGZyb20gJ2Rlcml2LXRyYW5zbGF0aW9ucyc7XG5pbXBvcnQgeyBCdXR0b24gfSAgICAgICAgICAgICAgICAgICAgIGZyb20gJ2Rlcml2LWNvbXBvbmVudHMnO1xuaW1wb3J0IEZvcm1BZHMgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICcuL2Zvcm0tYWRzLmpzeCc7XG5pbXBvcnQgVG9nZ2xlQWRzICAgICAgICAgICAgICAgICAgICAgIGZyb20gJy4vdG9nZ2xlLWFkcy5qc3gnO1xuaW1wb3J0ICcuL215LWFkcy5zY3NzJztcblxuY2xhc3MgTXlBZHMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRlID0ge1xuICAgICAgICBhZF9pZCAgICAgOiAnJyxcbiAgICAgICAgaXNfZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHNob3dfZm9ybSA6IGZhbHNlLFxuICAgIH1cblxuICAgIGhhbmRsZVNob3dGb3JtID0gKHNob3dfZm9ybSkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd19mb3JtIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteS1hZHMnPlxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3dfZm9ybSA/IChcbiAgICAgICAgICAgICAgICAgICAgPEZvcm1BZHMgYWRfaWQ9e3RoaXMuc3RhdGUuYWRfaWR9IGhhbmRsZVNob3dGb3JtPXt0aGlzLmhhbmRsZVNob3dGb3JtfSAvPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdteS1hZHNfX2hlYWRlcic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZUFkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19lbmFibGVkPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlU2hvd0Zvcm0odHJ1ZSkgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvY2FsaXplKCdDcmVhdGUgYWRzJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNeUFkcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBOztBQU1BO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7Ozs7Ozs7QUFFQTtBQUFBOztBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUdBO0FBQUE7QUFFQTtBQURBO0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFGQTtBQVdBOzs7O0FBakNBO0FBQ0E7QUFtQ0E7OztBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/components/my-ads/my-ads.jsx\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/my-ads/my-ads.scss\":\n/*!*******************************************!*\\\n  !*** ./src/components/my-ads/my-ads.scss ***!\n  \\*******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\nvar content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./my-ads.scss */ \\\"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/my-ads/my-ads.scss\\\");\\n\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n\\nvar transform;\\nvar insertInto;\\n\\n\\n\\nvar options = {\\\"hmr\\\":true}\\n\\noptions.transform = transform\\noptions.insertInto = undefined;\\n\\nvar update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ \\\"./node_modules/style-loader/lib/addStyles.js\\\")(content, options);\\n\\nif(content.locals) module.exports = content.locals;\\n\\nif(false) {}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9teS1hZHMvbXktYWRzLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvLi9zcmMvY29tcG9uZW50cy9teS1hZHMvbXktYWRzLnNjc3M/NjYxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS03LTMhLi9teS1hZHMuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS03LTMhLi9teS1hZHMuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1yZXNvdXJjZXMtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tNy0zIS4vbXktYWRzLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/components/my-ads/my-ads.scss\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/my-ads/toggle-ads.jsx\":\n/*!**********************************************!*\\\n  !*** ./src/components/my-ads/toggle-ads.jsx ***!\n  \\**********************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \\\"prop-types\\\");\\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-translations */ \\\"deriv-translations\\\");\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_translations__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var deriv_components_lib_toggle_switch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! deriv-components/lib/toggle-switch */ \\\"deriv-components/lib/toggle-switch\\\");\\n/* harmony import */ var deriv_components_lib_toggle_switch__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_toggle_switch__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var deriv_components_lib_toggle_switch_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! deriv-components/lib/toggle-switch.css */ \\\"deriv-components/lib/toggle-switch.css\\\");\\n/* harmony import */ var deriv_components_lib_toggle_switch_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_toggle_switch_css__WEBPACK_IMPORTED_MODULE_4__);\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! classnames */ \\\"./node_modules/classnames/index.js\\\");\\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_5__);\\n/* harmony import */ var _my_ads_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./my-ads.scss */ \\\"./src/components/my-ads/my-ads.scss\\\");\\n/* harmony import */ var _my_ads_scss__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_my_ads_scss__WEBPACK_IMPORTED_MODULE_6__);\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n        \\n\\n\\n\\nvar ToggleMessage = function ToggleMessage(_ref) {\\n  var is_enabled = _ref.is_enabled,\\n      className = _ref.className;\\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"p\\\", {\\n    className: className\\n  }, is_enabled ? Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Your ads are running') : Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Your ads are paused'));\\n};\\n\\nToggleMessage.propTypes = {\\n  className: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.string,\\n  is_enabled: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool.isRequired\\n};\\n\\nvar ToggleAds =\\n/*#__PURE__*/\\nfunction (_Component) {\\n  _inherits(ToggleAds, _Component);\\n\\n  function ToggleAds() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, ToggleAds);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToggleAds)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.state = {\\n      is_enabled: _this.props.is_enabled\\n    };\\n    return _this;\\n  }\\n\\n  _createClass(ToggleAds, [{\\n    key: \\\"setEnabled\\\",\\n    value: function setEnabled(is_enabled) {\\n      this.setState({\\n        is_enabled: is_enabled\\n      });\\n    }\\n  }, {\\n    key: \\\"render\\\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", {\\n        className: classnames__WEBPACK_IMPORTED_MODULE_5___default()('toggle-ads', this.state.is_enabled ? 'toggle-ads--on' : 'toggle-ads--off')\\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_components_lib_toggle_switch__WEBPACK_IMPORTED_MODULE_3___default.a, {\\n        id: \\\"toggle-my-ads\\\",\\n        className: \\\"toggle-ads__switch\\\",\\n        classNameLabel: \\\"toggle-ads__switch\\\",\\n        is_enabled: this.state.is_enabled,\\n        handleToggle: function handleToggle() {\\n          _this2.setEnabled(!_this2.state.is_enabled);\\n        }\\n      }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ToggleMessage, {\\n        is_enabled: this.state.is_enabled,\\n        className: \\\"toggle-ads__message\\\"\\n      }));\\n    }\\n  }]);\\n\\n  return ToggleAds;\\n}(react__WEBPACK_IMPORTED_MODULE_0__[\\\"Component\\\"]);\\n\\nToggleAds.propTypes = {\\n  is_enabled: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.bool.isRequired\\n};\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (ToggleAds);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9teS1hZHMvdG9nZ2xlLWFkcy5qc3guanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvLi9zcmMvY29tcG9uZW50cy9teS1hZHMvdG9nZ2xlLWFkcy5qc3g/ZjNhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyAgICAgICAgICAgIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSAgICAgICAgIGZyb20gJ2Rlcml2LXRyYW5zbGF0aW9ucyc7XG5pbXBvcnQgeyBUb2dnbGVTd2l0Y2ggfSAgICAgZnJvbSAnZGVyaXYtY29tcG9uZW50cyc7XG5pbXBvcnQgY2xhc3NOYW1lcyAgICAgICAgICAgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgJy4vbXktYWRzLnNjc3MnO1xuXG5jb25zdCBUb2dnbGVNZXNzYWdlID0gKHsgaXNfZW5hYmxlZCwgY2xhc3NOYW1lIH0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8cCBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICAgICAgICB7aXNfZW5hYmxlZCA/IGxvY2FsaXplKCdZb3VyIGFkcyBhcmUgcnVubmluZycpIDogbG9jYWxpemUoJ1lvdXIgYWRzIGFyZSBwYXVzZWQnKX1cbiAgICAgICAgPC9wPlxuICAgICk7XG59O1xuXG5Ub2dnbGVNZXNzYWdlLnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc05hbWUgOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlzX2VuYWJsZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG59O1xuXG5jbGFzcyBUb2dnbGVBZHMgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIGlzX2VuYWJsZWQ6IHRoaXMucHJvcHMuaXNfZW5hYmxlZCxcbiAgICB9XG5cbiAgICBzZXRFbmFibGVkIChpc19lbmFibGVkKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc19lbmFibGVkIH0pO1xuICAgIH1cblxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICAgICAgICAgICAndG9nZ2xlLWFkcycsXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc19lbmFibGVkID8gJ3RvZ2dsZS1hZHMtLW9uJyA6ICd0b2dnbGUtYWRzLS1vZmYnLFxuICAgICAgICAgICAgKX0+XG4gICAgICAgICAgICAgICAgPFRvZ2dsZVN3aXRjaFxuICAgICAgICAgICAgICAgICAgICBpZD0ndG9nZ2xlLW15LWFkcydcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSd0b2dnbGUtYWRzX19zd2l0Y2gnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZUxhYmVsPSd0b2dnbGUtYWRzX19zd2l0Y2gnXG4gICAgICAgICAgICAgICAgICAgIGlzX2VuYWJsZWQ9e3RoaXMuc3RhdGUuaXNfZW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlVG9nZ2xlPXsoKSA9PiB7dGhpcy5zZXRFbmFibGVkKCF0aGlzLnN0YXRlLmlzX2VuYWJsZWQpO319XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8VG9nZ2xlTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICBpc19lbmFibGVkPXt0aGlzLnN0YXRlLmlzX2VuYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ndG9nZ2xlLWFkc19fbWVzc2FnZSdcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Ub2dnbGVBZHMucHJvcFR5cGVzID0ge1xuICAgIGlzX2VuYWJsZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb2dnbGVBZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBSUE7O0FBRUE7QUFDQTtBQUNBO0FBRkE7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7QUFDQTtBQURBOzs7Ozs7QUFJQTtBQUNBO0FBQUE7QUFBQTtBQUNBOzs7QUFFQTtBQUFBOztBQUNBO0FBQ0E7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBTEE7QUFRQTtBQUNBO0FBRkE7QUFNQTs7OztBQTdCQTtBQUNBO0FBK0JBO0FBQ0E7QUFEQTtBQUlBOzs7QSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/components/my-ads/toggle-ads.jsx\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/my-profile/my-profile.jsx\":\n/*!**************************************************!*\\\n  !*** ./src/components/my-profile/my-profile.jsx ***!\n  \\**************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _my_profile_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./my-profile.scss */ \\\"./src/components/my-profile/my-profile.scss\\\");\\n/* harmony import */ var _my_profile_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_my_profile_scss__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-translations */ \\\"deriv-translations\\\");\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_translations__WEBPACK_IMPORTED_MODULE_2__);\\n\\n\\n\\n\\nvar MyProfile = function MyProfile() {\\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", null, Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('MyProfile'));\\n};\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (MyProfile);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9teS1wcm9maWxlL215LXByb2ZpbGUuanN4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwLy4vc3JjL2NvbXBvbmVudHMvbXktcHJvZmlsZS9teS1wcm9maWxlLmpzeD82M2ZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJy4vbXktcHJvZmlsZS5zY3NzJztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnZGVyaXYtdHJhbnNsYXRpb25zJztcblxuY29uc3QgTXlQcm9maWxlID0gKCkgPT4ge1xuICAgIHJldHVybiA8ZGl2Pntsb2NhbGl6ZSgnTXlQcm9maWxlJyl9PC9kaXY+O1xufTtcbiBcbmV4cG9ydCBkZWZhdWx0IE15UHJvZmlsZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/components/my-profile/my-profile.jsx\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/my-profile/my-profile.scss\":\n/*!***************************************************!*\\\n  !*** ./src/components/my-profile/my-profile.scss ***!\n  \\***************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\nvar content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./my-profile.scss */ \\\"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/my-profile/my-profile.scss\\\");\\n\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n\\nvar transform;\\nvar insertInto;\\n\\n\\n\\nvar options = {\\\"hmr\\\":true}\\n\\noptions.transform = transform\\noptions.insertInto = undefined;\\n\\nvar update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ \\\"./node_modules/style-loader/lib/addStyles.js\\\")(content, options);\\n\\nif(content.locals) module.exports = content.locals;\\n\\nif(false) {}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9teS1wcm9maWxlL215LXByb2ZpbGUuc2Nzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC8uL3NyYy9jb21wb25lbnRzL215LXByb2ZpbGUvbXktcHJvZmlsZS5zY3NzPzc2NzEiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1yZXNvdXJjZXMtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tNy0zIS4vbXktcHJvZmlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtcmVzb3VyY2VzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTctMyEuL215LXByb2ZpbGUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1yZXNvdXJjZXMtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tNy0zIS4vbXktcHJvZmlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/components/my-profile/my-profile.scss\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/orders/orders.jsx\":\n/*!******************************************!*\\\n  !*** ./src/components/orders/orders.jsx ***!\n  \\******************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _orders_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./orders.scss */ \\\"./src/components/orders/orders.scss\\\");\\n/* harmony import */ var _orders_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_orders_scss__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-translations */ \\\"deriv-translations\\\");\\n/* harmony import */ var deriv_translations__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_translations__WEBPACK_IMPORTED_MODULE_2__);\\n\\n\\n\\n\\nvar Orders = function Orders() {\\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\\\"div\\\", null, Object(deriv_translations__WEBPACK_IMPORTED_MODULE_2__[\\\"localize\\\"])('Orders'));\\n};\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (Orders);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9vcmRlcnMvb3JkZXJzLmpzeC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC8uL3NyYy9jb21wb25lbnRzL29yZGVycy9vcmRlcnMuanN4PzI2MjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9vcmRlcnMuc2Nzcyc7XG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gJ2Rlcml2LXRyYW5zbGF0aW9ucyc7XG5cbmNvbnN0IE9yZGVycyA9ICgpID0+IHtcbiAgICByZXR1cm4gPGRpdj57bG9jYWxpemUoJ09yZGVycycpfTwvZGl2Pjtcbn07XG4gXG5leHBvcnQgZGVmYXVsdCBPcmRlcnM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/components/orders/orders.jsx\\n\");\n\n/***/ }),\n\n/***/ \"./src/components/orders/orders.scss\":\n/*!*******************************************!*\\\n  !*** ./src/components/orders/orders.scss ***!\n  \\*******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"\\nvar content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/sass-resources-loader/lib/loader.js??ref--7-3!./orders.scss */ \\\"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/sass-resources-loader/lib/loader.js?!./src/components/orders/orders.scss\\\");\\n\\nif(typeof content === 'string') content = [[module.i, content, '']];\\n\\nvar transform;\\nvar insertInto;\\n\\n\\n\\nvar options = {\\\"hmr\\\":true}\\n\\noptions.transform = transform\\noptions.insertInto = undefined;\\n\\nvar update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ \\\"./node_modules/style-loader/lib/addStyles.js\\\")(content, options);\\n\\nif(content.locals) module.exports = content.locals;\\n\\nif(false) {}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9vcmRlcnMvb3JkZXJzLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvLi9zcmMvY29tcG9uZW50cy9vcmRlcnMvb3JkZXJzLnNjc3M/NzFjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS03LTMhLi9vcmRlcnMuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS03LTMhLi9vcmRlcnMuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1yZXNvdXJjZXMtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tNy0zIS4vb3JkZXJzLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/components/orders/orders.scss\\n\");\n\n/***/ }),\n\n/***/ \"./src/utils/websocket.js\":\n/*!********************************!*\\\n  !*** ./src/utils/websocket.js ***!\n  \\********************************/\n/*! exports provided: init, WS */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"init\\\", function() { return init; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"WS\\\", function() { return WS; });\\nvar ws;\\nvar init = function init(websocket) {\\n  ws = websocket;\\n};\\nvar WS = function WS() {\\n  return ws;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvd2Vic29ja2V0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwLy4vc3JjL3V0aWxzL3dlYnNvY2tldC5qcz9iMmViIl0sInNvdXJjZXNDb250ZW50IjpbImxldCB3cztcblxuZXhwb3J0IGNvbnN0IGluaXQgPSAod2Vic29ja2V0KSA9PiB7XG4gICAgd3MgPSB3ZWJzb2NrZXQ7XG59O1xuXG5leHBvcnQgY29uc3QgV1MgPSAoKSA9PiB3cztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/utils/websocket.js\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/autocomplete\":\n/*!****************************************************!*\\\n  !*** external \"deriv-components/lib/autocomplete\" ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_autocomplete__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvYXV0b2NvbXBsZXRlLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwL2V4dGVybmFsIFwiZGVyaXYtY29tcG9uZW50cy9saWIvYXV0b2NvbXBsZXRlXCI/MmJmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfZGVyaXZfY29tcG9uZW50c19saWJfYXV0b2NvbXBsZXRlX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/autocomplete\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/autocomplete.css\":\n/*!********************************************************!*\\\n  !*** external \"deriv-components/lib/autocomplete.css\" ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_autocomplete_css__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvYXV0b2NvbXBsZXRlLmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC9leHRlcm5hbCBcImRlcml2LWNvbXBvbmVudHMvbGliL2F1dG9jb21wbGV0ZS5jc3NcIj9hNTYxIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9kZXJpdl9jb21wb25lbnRzX2xpYl9hdXRvY29tcGxldGVfY3NzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/autocomplete.css\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/button\":\n/*!**********************************************!*\\\n  !*** external \"deriv-components/lib/button\" ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_button__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvYnV0dG9uLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwL2V4dGVybmFsIFwiZGVyaXYtY29tcG9uZW50cy9saWIvYnV0dG9uXCI/ZWE1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfZGVyaXZfY29tcG9uZW50c19saWJfYnV0dG9uX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/button\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/button-toggle-menu\":\n/*!**********************************************************!*\\\n  !*** external \"deriv-components/lib/button-toggle-menu\" ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_button_toggle_menu__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvYnV0dG9uLXRvZ2dsZS1tZW51LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwL2V4dGVybmFsIFwiZGVyaXYtY29tcG9uZW50cy9saWIvYnV0dG9uLXRvZ2dsZS1tZW51XCI/MzA2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfZGVyaXZfY29tcG9uZW50c19saWJfYnV0dG9uX3RvZ2dsZV9tZW51X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/button-toggle-menu\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/button-toggle-menu.css\":\n/*!**************************************************************!*\\\n  !*** external \"deriv-components/lib/button-toggle-menu.css\" ***!\n  \\**************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_button_toggle_menu_css__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvYnV0dG9uLXRvZ2dsZS1tZW51LmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC9leHRlcm5hbCBcImRlcml2LWNvbXBvbmVudHMvbGliL2J1dHRvbi10b2dnbGUtbWVudS5jc3NcIj84NzI4Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9kZXJpdl9jb21wb25lbnRzX2xpYl9idXR0b25fdG9nZ2xlX21lbnVfY3NzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/button-toggle-menu.css\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/button.css\":\n/*!**************************************************!*\\\n  !*** external \"deriv-components/lib/button.css\" ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_button_css__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvYnV0dG9uLmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC9leHRlcm5hbCBcImRlcml2LWNvbXBvbmVudHMvbGliL2J1dHRvbi5jc3NcIj81ZDY4Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9kZXJpdl9jb21wb25lbnRzX2xpYl9idXR0b25fY3NzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/button.css\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/dropdown\":\n/*!************************************************!*\\\n  !*** external \"deriv-components/lib/dropdown\" ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_dropdown__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvZHJvcGRvd24uanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvZXh0ZXJuYWwgXCJkZXJpdi1jb21wb25lbnRzL2xpYi9kcm9wZG93blwiPzBlMzciXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Rlcml2X2NvbXBvbmVudHNfbGliX2Ryb3Bkb3duX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/dropdown\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/dropdown.css\":\n/*!****************************************************!*\\\n  !*** external \"deriv-components/lib/dropdown.css\" ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_dropdown_css__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvZHJvcGRvd24uY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwL2V4dGVybmFsIFwiZGVyaXYtY29tcG9uZW50cy9saWIvZHJvcGRvd24uY3NzXCI/NWQwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfZGVyaXZfY29tcG9uZW50c19saWJfZHJvcGRvd25fY3NzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/dropdown.css\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/input\":\n/*!*********************************************!*\\\n  !*** external \"deriv-components/lib/input\" ***!\n  \\*********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_input__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvaW5wdXQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvZXh0ZXJuYWwgXCJkZXJpdi1jb21wb25lbnRzL2xpYi9pbnB1dFwiPzlkN2QiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Rlcml2X2NvbXBvbmVudHNfbGliX2lucHV0X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/input\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/input.css\":\n/*!*************************************************!*\\\n  !*** external \"deriv-components/lib/input.css\" ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_input_css__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvaW5wdXQuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwL2V4dGVybmFsIFwiZGVyaXYtY29tcG9uZW50cy9saWIvaW5wdXQuY3NzXCI/ZTRiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfZGVyaXZfY29tcG9uZW50c19saWJfaW5wdXRfY3NzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/input.css\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/loading\":\n/*!***********************************************!*\\\n  !*** external \"deriv-components/lib/loading\" ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_loading__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvbG9hZGluZy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC9leHRlcm5hbCBcImRlcml2LWNvbXBvbmVudHMvbGliL2xvYWRpbmdcIj9kMDAzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9kZXJpdl9jb21wb25lbnRzX2xpYl9sb2FkaW5nX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/loading\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/loading.css\":\n/*!***************************************************!*\\\n  !*** external \"deriv-components/lib/loading.css\" ***!\n  \\***************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_loading_css__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvbG9hZGluZy5jc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvZXh0ZXJuYWwgXCJkZXJpdi1jb21wb25lbnRzL2xpYi9sb2FkaW5nLmNzc1wiP2M3MTYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Rlcml2X2NvbXBvbmVudHNfbGliX2xvYWRpbmdfY3NzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/loading.css\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/tabs\":\n/*!********************************************!*\\\n  !*** external \"deriv-components/lib/tabs\" ***!\n  \\********************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_tabs__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvdGFicy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC9leHRlcm5hbCBcImRlcml2LWNvbXBvbmVudHMvbGliL3RhYnNcIj9jYTAyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9kZXJpdl9jb21wb25lbnRzX2xpYl90YWJzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/tabs\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/tabs.css\":\n/*!************************************************!*\\\n  !*** external \"deriv-components/lib/tabs.css\" ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_tabs_css__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvdGFicy5jc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvZXh0ZXJuYWwgXCJkZXJpdi1jb21wb25lbnRzL2xpYi90YWJzLmNzc1wiPzU5MDYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Rlcml2X2NvbXBvbmVudHNfbGliX3RhYnNfY3NzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/tabs.css\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/themed-scrollbars\":\n/*!*********************************************************!*\\\n  !*** external \"deriv-components/lib/themed-scrollbars\" ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_themed_scrollbars__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvdGhlbWVkLXNjcm9sbGJhcnMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvZXh0ZXJuYWwgXCJkZXJpdi1jb21wb25lbnRzL2xpYi90aGVtZWQtc2Nyb2xsYmFyc1wiP2VlNDQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Rlcml2X2NvbXBvbmVudHNfbGliX3RoZW1lZF9zY3JvbGxiYXJzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/themed-scrollbars\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/themed-scrollbars.css\":\n/*!*************************************************************!*\\\n  !*** external \"deriv-components/lib/themed-scrollbars.css\" ***!\n  \\*************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_themed_scrollbars_css__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvdGhlbWVkLXNjcm9sbGJhcnMuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwL2V4dGVybmFsIFwiZGVyaXYtY29tcG9uZW50cy9saWIvdGhlbWVkLXNjcm9sbGJhcnMuY3NzXCI/ZmY3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfZGVyaXZfY29tcG9uZW50c19saWJfdGhlbWVkX3Njcm9sbGJhcnNfY3NzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/themed-scrollbars.css\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/toggle-switch\":\n/*!*****************************************************!*\\\n  !*** external \"deriv-components/lib/toggle-switch\" ***!\n  \\*****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_toggle_switch__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvdG9nZ2xlLXN3aXRjaC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC9leHRlcm5hbCBcImRlcml2LWNvbXBvbmVudHMvbGliL3RvZ2dsZS1zd2l0Y2hcIj85YjUxIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9kZXJpdl9jb21wb25lbnRzX2xpYl90b2dnbGVfc3dpdGNoX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/toggle-switch\\n\");\n\n/***/ }),\n\n/***/ \"deriv-components/lib/toggle-switch.css\":\n/*!*********************************************************!*\\\n  !*** external \"deriv-components/lib/toggle-switch.css\" ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_components_lib_toggle_switch_css__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtY29tcG9uZW50cy9saWIvdG9nZ2xlLXN3aXRjaC5jc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvZXh0ZXJuYWwgXCJkZXJpdi1jb21wb25lbnRzL2xpYi90b2dnbGUtc3dpdGNoLmNzc1wiP2RiODYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Rlcml2X2NvbXBvbmVudHNfbGliX3RvZ2dsZV9zd2l0Y2hfY3NzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-components/lib/toggle-switch.css\\n\");\n\n/***/ }),\n\n/***/ \"deriv-translations\":\n/*!*************************************!*\\\n  !*** external \"deriv-translations\" ***!\n  \\*************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_deriv_translations__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXYtdHJhbnNsYXRpb25zLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwL2V4dGVybmFsIFwiZGVyaXYtdHJhbnNsYXRpb25zXCI/NTMxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfZGVyaXZfdHJhbnNsYXRpb25zX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///deriv-translations\\n\");\n\n/***/ }),\n\n/***/ \"formik\":\n/*!*************************!*\\\n  !*** external \"formik\" ***!\n  \\*************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_formik__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWlrLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVyaXYtcDJwL2V4dGVybmFsIFwiZm9ybWlrXCI/NzBkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfZm9ybWlrX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///formik\\n\");\n\n/***/ }),\n\n/***/ \"prop-types\":\n/*!*****************************!*\\\n  !*** external \"prop-types\" ***!\n  \\*****************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_prop_types__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcC10eXBlcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LXAycC9leHRlcm5hbCBcInByb3AtdHlwZXNcIj8zODMyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9wcm9wX3R5cGVzX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///prop-types\\n\");\n\n/***/ }),\n\n/***/ \"react\":\n/*!************************!*\\\n  !*** external \"react\" ***!\n  \\************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_react__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1wMnAvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JlYWN0X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///react\\n\");\n\n/***/ })\n\n/******/ })[\"default\"];\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../p2p/lib/index.js\n");

/***/ }),

/***/ "./Modules/Cashier/Containers/p2p-cashier.jsx":
/*!****************************************************!*\
  !*** ./Modules/Cashier/Containers/p2p-cashier.jsx ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var Services__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Services */ \"./Services/index.js\");\n/* harmony import */ var deriv_p2p__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-p2p */ \"../../p2p/index.js\");\n/* harmony import */ var deriv_p2p__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_p2p__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n/* P2P will use the same websocket connection as Deriv/Binary, we needs to pass it as props */\n\nvar P2PCashier = function P2PCashier() {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deriv_p2p__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    websocket_api: Services__WEBPACK_IMPORTED_MODULE_1__[\"WS\"]\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (P2PCashier);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Nb2R1bGVzL0Nhc2hpZXIvQ29udGFpbmVycy9wMnAtY2FzaGllci5qc3guanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9Nb2R1bGVzL0Nhc2hpZXIvQ29udGFpbmVycy9wMnAtY2FzaGllci5qc3g/MzE5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgIGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFdTIH0gZnJvbSAnU2VydmljZXMnO1xuaW1wb3J0IFAyUCAgICBmcm9tICdkZXJpdi1wMnAnO1xuXG4vKiBQMlAgd2lsbCB1c2UgdGhlIHNhbWUgd2Vic29ja2V0IGNvbm5lY3Rpb24gYXMgRGVyaXYvQmluYXJ5LCB3ZSBuZWVkcyB0byBwYXNzIGl0IGFzIHByb3BzICovXG5jb25zdCBQMlBDYXNoaWVyID0gKCkgPT4gPFAyUCB3ZWJzb2NrZXRfYXBpPXtXU30gLz47XG5cbmV4cG9ydCBkZWZhdWx0IFAyUENhc2hpZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Modules/Cashier/Containers/p2p-cashier.jsx\n");

/***/ })

}]);